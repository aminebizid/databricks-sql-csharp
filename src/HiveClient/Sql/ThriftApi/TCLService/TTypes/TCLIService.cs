/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{
  public partial class TCLIService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionResp> OpenSession(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionResp> CloseSession(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoResp> GetInfo(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementResp> ExecuteStatement(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoResp> GetTypeInfo(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsResp> GetCatalogs(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasResp> GetSchemas(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesResp> GetTables(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesResp> GetTableTypes(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsResp> GetColumns(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsResp> GetFunctions(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysResp> GetPrimaryKeys(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceResp> GetCrossReference(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp> GetOperationStatus(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationResp> CancelOperation(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp> CloseOperation(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp> GetResultSetMetadata(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp> FetchResults(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenResp> GetDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenResp> CancelDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenReq? req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenResp> RenewDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenReq? req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionResp> OpenSession(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionReq? req, CancellationToken cancellationToken = default)
      {
        await send_OpenSession(req, cancellationToken);
        return await recv_OpenSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OpenSession(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp489 = new InternalStructs.OpenSession_args() {
          Req = req,
        };
        
        await tmp489.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionResp> recv_OpenSession(CancellationToken cancellationToken = default)
      {
        
        var tmp490 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp490.Type == TMessageType.Exception)
        {
          var tmp491 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp491;
        }

        var tmp492 = new InternalStructs.OpenSession_result();
        await tmp492.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp492.__isset.success)
        {
          return tmp492.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionResp> CloseSession(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionReq? req, CancellationToken cancellationToken = default)
      {
        await send_CloseSession(req, cancellationToken);
        return await recv_CloseSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseSession(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp493 = new InternalStructs.CloseSession_args() {
          Req = req,
        };
        
        await tmp493.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionResp> recv_CloseSession(CancellationToken cancellationToken = default)
      {
        
        var tmp494 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp494.Type == TMessageType.Exception)
        {
          var tmp495 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp495;
        }

        var tmp496 = new InternalStructs.CloseSession_result();
        await tmp496.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp496.__isset.success)
        {
          return tmp496.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoResp> GetInfo(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetInfo(req, cancellationToken);
        return await recv_GetInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetInfo(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp497 = new InternalStructs.GetInfo_args() {
          Req = req,
        };
        
        await tmp497.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoResp> recv_GetInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp498 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp498.Type == TMessageType.Exception)
        {
          var tmp499 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp499;
        }

        var tmp500 = new InternalStructs.GetInfo_result();
        await tmp500.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp500.__isset.success)
        {
          return tmp500.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementResp> ExecuteStatement(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementReq? req, CancellationToken cancellationToken = default)
      {
        await send_ExecuteStatement(req, cancellationToken);
        return await recv_ExecuteStatement(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ExecuteStatement(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp501 = new InternalStructs.ExecuteStatement_args() {
          Req = req,
        };
        
        await tmp501.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementResp> recv_ExecuteStatement(CancellationToken cancellationToken = default)
      {
        
        var tmp502 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp502.Type == TMessageType.Exception)
        {
          var tmp503 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp503;
        }

        var tmp504 = new InternalStructs.ExecuteStatement_result();
        await tmp504.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp504.__isset.success)
        {
          return tmp504.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteStatement failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoResp> GetTypeInfo(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetTypeInfo(req, cancellationToken);
        return await recv_GetTypeInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTypeInfo(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp505 = new InternalStructs.GetTypeInfo_args() {
          Req = req,
        };
        
        await tmp505.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoResp> recv_GetTypeInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp506 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp506.Type == TMessageType.Exception)
        {
          var tmp507 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp507;
        }

        var tmp508 = new InternalStructs.GetTypeInfo_result();
        await tmp508.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp508.__isset.success)
        {
          return tmp508.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTypeInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsResp> GetCatalogs(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetCatalogs(req, cancellationToken);
        return await recv_GetCatalogs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCatalogs(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp509 = new InternalStructs.GetCatalogs_args() {
          Req = req,
        };
        
        await tmp509.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsResp> recv_GetCatalogs(CancellationToken cancellationToken = default)
      {
        
        var tmp510 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp510.Type == TMessageType.Exception)
        {
          var tmp511 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp511;
        }

        var tmp512 = new InternalStructs.GetCatalogs_result();
        await tmp512.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp512.__isset.success)
        {
          return tmp512.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCatalogs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasResp> GetSchemas(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetSchemas(req, cancellationToken);
        return await recv_GetSchemas(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSchemas(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp513 = new InternalStructs.GetSchemas_args() {
          Req = req,
        };
        
        await tmp513.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasResp> recv_GetSchemas(CancellationToken cancellationToken = default)
      {
        
        var tmp514 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp514.Type == TMessageType.Exception)
        {
          var tmp515 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp515;
        }

        var tmp516 = new InternalStructs.GetSchemas_result();
        await tmp516.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp516.__isset.success)
        {
          return tmp516.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSchemas failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesResp> GetTables(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetTables(req, cancellationToken);
        return await recv_GetTables(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTables(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp517 = new InternalStructs.GetTables_args() {
          Req = req,
        };
        
        await tmp517.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesResp> recv_GetTables(CancellationToken cancellationToken = default)
      {
        
        var tmp518 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp518.Type == TMessageType.Exception)
        {
          var tmp519 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp519;
        }

        var tmp520 = new InternalStructs.GetTables_result();
        await tmp520.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp520.__isset.success)
        {
          return tmp520.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTables failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesResp> GetTableTypes(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetTableTypes(req, cancellationToken);
        return await recv_GetTableTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTableTypes(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp521 = new InternalStructs.GetTableTypes_args() {
          Req = req,
        };
        
        await tmp521.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesResp> recv_GetTableTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp522 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp522.Type == TMessageType.Exception)
        {
          var tmp523 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp523;
        }

        var tmp524 = new InternalStructs.GetTableTypes_result();
        await tmp524.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp524.__isset.success)
        {
          return tmp524.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTableTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsResp> GetColumns(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetColumns(req, cancellationToken);
        return await recv_GetColumns(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetColumns(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp525 = new InternalStructs.GetColumns_args() {
          Req = req,
        };
        
        await tmp525.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsResp> recv_GetColumns(CancellationToken cancellationToken = default)
      {
        
        var tmp526 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp526.Type == TMessageType.Exception)
        {
          var tmp527 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp527;
        }

        var tmp528 = new InternalStructs.GetColumns_result();
        await tmp528.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp528.__isset.success)
        {
          return tmp528.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColumns failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsResp> GetFunctions(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetFunctions(req, cancellationToken);
        return await recv_GetFunctions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetFunctions(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp529 = new InternalStructs.GetFunctions_args() {
          Req = req,
        };
        
        await tmp529.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsResp> recv_GetFunctions(CancellationToken cancellationToken = default)
      {
        
        var tmp530 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp530.Type == TMessageType.Exception)
        {
          var tmp531 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp531;
        }

        var tmp532 = new InternalStructs.GetFunctions_result();
        await tmp532.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp532.__isset.success)
        {
          return tmp532.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFunctions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysResp> GetPrimaryKeys(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetPrimaryKeys(req, cancellationToken);
        return await recv_GetPrimaryKeys(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetPrimaryKeys(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp533 = new InternalStructs.GetPrimaryKeys_args() {
          Req = req,
        };
        
        await tmp533.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysResp> recv_GetPrimaryKeys(CancellationToken cancellationToken = default)
      {
        
        var tmp534 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp534.Type == TMessageType.Exception)
        {
          var tmp535 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp535;
        }

        var tmp536 = new InternalStructs.GetPrimaryKeys_result();
        await tmp536.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp536.__isset.success)
        {
          return tmp536.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPrimaryKeys failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceResp> GetCrossReference(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetCrossReference(req, cancellationToken);
        return await recv_GetCrossReference(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCrossReference(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp537 = new InternalStructs.GetCrossReference_args() {
          Req = req,
        };
        
        await tmp537.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceResp> recv_GetCrossReference(CancellationToken cancellationToken = default)
      {
        
        var tmp538 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp538.Type == TMessageType.Exception)
        {
          var tmp539 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp539;
        }

        var tmp540 = new InternalStructs.GetCrossReference_result();
        await tmp540.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp540.__isset.success)
        {
          return tmp540.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCrossReference failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp> GetOperationStatus(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetOperationStatus(req, cancellationToken);
        return await recv_GetOperationStatus(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetOperationStatus(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp541 = new InternalStructs.GetOperationStatus_args() {
          Req = req,
        };
        
        await tmp541.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp> recv_GetOperationStatus(CancellationToken cancellationToken = default)
      {
        
        var tmp542 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp542.Type == TMessageType.Exception)
        {
          var tmp543 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp543;
        }

        var tmp544 = new InternalStructs.GetOperationStatus_result();
        await tmp544.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp544.__isset.success)
        {
          return tmp544.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOperationStatus failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationResp> CancelOperation(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationReq? req, CancellationToken cancellationToken = default)
      {
        await send_CancelOperation(req, cancellationToken);
        return await recv_CancelOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelOperation(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp545 = new InternalStructs.CancelOperation_args() {
          Req = req,
        };
        
        await tmp545.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationResp> recv_CancelOperation(CancellationToken cancellationToken = default)
      {
        
        var tmp546 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp546.Type == TMessageType.Exception)
        {
          var tmp547 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp547;
        }

        var tmp548 = new InternalStructs.CancelOperation_result();
        await tmp548.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp548.__isset.success)
        {
          return tmp548.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp> CloseOperation(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationReq? req, CancellationToken cancellationToken = default)
      {
        await send_CloseOperation(req, cancellationToken);
        return await recv_CloseOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseOperation(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp549 = new InternalStructs.CloseOperation_args() {
          Req = req,
        };
        
        await tmp549.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp> recv_CloseOperation(CancellationToken cancellationToken = default)
      {
        
        var tmp550 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp550.Type == TMessageType.Exception)
        {
          var tmp551 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp551;
        }

        var tmp552 = new InternalStructs.CloseOperation_result();
        await tmp552.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp552.__isset.success)
        {
          return tmp552.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp> GetResultSetMetadata(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetResultSetMetadata(req, cancellationToken);
        return await recv_GetResultSetMetadata(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetResultSetMetadata(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp553 = new InternalStructs.GetResultSetMetadata_args() {
          Req = req,
        };
        
        await tmp553.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp> recv_GetResultSetMetadata(CancellationToken cancellationToken = default)
      {
        
        var tmp554 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp554.Type == TMessageType.Exception)
        {
          var tmp555 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp555;
        }

        var tmp556 = new InternalStructs.GetResultSetMetadata_result();
        await tmp556.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp556.__isset.success)
        {
          return tmp556.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetResultSetMetadata failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp> FetchResults(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsReq? req, CancellationToken cancellationToken = default)
      {
        await send_FetchResults(req, cancellationToken);
        return await recv_FetchResults(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_FetchResults(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp557 = new InternalStructs.FetchResults_args() {
          Req = req,
        };
        
        await tmp557.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp> recv_FetchResults(CancellationToken cancellationToken = default)
      {
        
        var tmp558 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp558.Type == TMessageType.Exception)
        {
          var tmp559 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp559;
        }

        var tmp560 = new InternalStructs.FetchResults_result();
        await tmp560.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp560.__isset.success)
        {
          return tmp560.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FetchResults failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenResp> GetDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenReq? req, CancellationToken cancellationToken = default)
      {
        await send_GetDelegationToken(req, cancellationToken);
        return await recv_GetDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp561 = new InternalStructs.GetDelegationToken_args() {
          Req = req,
        };
        
        await tmp561.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenResp> recv_GetDelegationToken(CancellationToken cancellationToken = default)
      {
        
        var tmp562 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp562.Type == TMessageType.Exception)
        {
          var tmp563 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp563;
        }

        var tmp564 = new InternalStructs.GetDelegationToken_result();
        await tmp564.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp564.__isset.success)
        {
          return tmp564.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenResp> CancelDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenReq? req, CancellationToken cancellationToken = default)
      {
        await send_CancelDelegationToken(req, cancellationToken);
        return await recv_CancelDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp565 = new InternalStructs.CancelDelegationToken_args() {
          Req = req,
        };
        
        await tmp565.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenResp> recv_CancelDelegationToken(CancellationToken cancellationToken = default)
      {
        
        var tmp566 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp566.Type == TMessageType.Exception)
        {
          var tmp567 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp567;
        }

        var tmp568 = new InternalStructs.CancelDelegationToken_result();
        await tmp568.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp568.__isset.success)
        {
          return tmp568.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenResp> RenewDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenReq? req, CancellationToken cancellationToken = default)
      {
        await send_RenewDelegationToken(req, cancellationToken);
        return await recv_RenewDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RenewDelegationToken(global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenReq? req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp569 = new InternalStructs.RenewDelegationToken_args() {
          Req = req,
        };
        
        await tmp569.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenResp> recv_RenewDelegationToken(CancellationToken cancellationToken = default)
      {
        
        var tmp570 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp570.Type == TMessageType.Exception)
        {
          var tmp571 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp571;
        }

        var tmp572 = new InternalStructs.RenewDelegationToken_result();
        await tmp572.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp572.__isset.success)
        {
          return tmp572.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RenewDelegationToken failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["OpenSession"] = OpenSession_ProcessAsync;
        processMap_["CloseSession"] = CloseSession_ProcessAsync;
        processMap_["GetInfo"] = GetInfo_ProcessAsync;
        processMap_["ExecuteStatement"] = ExecuteStatement_ProcessAsync;
        processMap_["GetTypeInfo"] = GetTypeInfo_ProcessAsync;
        processMap_["GetCatalogs"] = GetCatalogs_ProcessAsync;
        processMap_["GetSchemas"] = GetSchemas_ProcessAsync;
        processMap_["GetTables"] = GetTables_ProcessAsync;
        processMap_["GetTableTypes"] = GetTableTypes_ProcessAsync;
        processMap_["GetColumns"] = GetColumns_ProcessAsync;
        processMap_["GetFunctions"] = GetFunctions_ProcessAsync;
        processMap_["GetPrimaryKeys"] = GetPrimaryKeys_ProcessAsync;
        processMap_["GetCrossReference"] = GetCrossReference_ProcessAsync;
        processMap_["GetOperationStatus"] = GetOperationStatus_ProcessAsync;
        processMap_["CancelOperation"] = CancelOperation_ProcessAsync;
        processMap_["CloseOperation"] = CloseOperation_ProcessAsync;
        processMap_["GetResultSetMetadata"] = GetResultSetMetadata_ProcessAsync;
        processMap_["FetchResults"] = FetchResults_ProcessAsync;
        processMap_["GetDelegationToken"] = GetDelegationToken_ProcessAsync;
        processMap_["CancelDelegationToken"] = CancelDelegationToken_ProcessAsync;
        processMap_["RenewDelegationToken"] = RenewDelegationToken_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task OpenSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp573 = new InternalStructs.OpenSession_args();
        await tmp573.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp574 = new InternalStructs.OpenSession_result();
        try
        {
          tmp574.Success = await _iAsync.OpenSession(tmp573.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp574.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp575)
        {
          var tmp576 = $"Error occurred in {GetType().FullName}: {tmp575.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp575, tmp576);
          else
            Console.Error.WriteLine(tmp576);
          var tmp577 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp577.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp578 = new InternalStructs.CloseSession_args();
        await tmp578.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp579 = new InternalStructs.CloseSession_result();
        try
        {
          tmp579.Success = await _iAsync.CloseSession(tmp578.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp579.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp580)
        {
          var tmp581 = $"Error occurred in {GetType().FullName}: {tmp580.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp580, tmp581);
          else
            Console.Error.WriteLine(tmp581);
          var tmp582 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp582.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp583 = new InternalStructs.GetInfo_args();
        await tmp583.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp584 = new InternalStructs.GetInfo_result();
        try
        {
          tmp584.Success = await _iAsync.GetInfo(tmp583.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp584.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp585)
        {
          var tmp586 = $"Error occurred in {GetType().FullName}: {tmp585.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp585, tmp586);
          else
            Console.Error.WriteLine(tmp586);
          var tmp587 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp587.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ExecuteStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp588 = new InternalStructs.ExecuteStatement_args();
        await tmp588.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp589 = new InternalStructs.ExecuteStatement_result();
        try
        {
          tmp589.Success = await _iAsync.ExecuteStatement(tmp588.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Reply, seqid), cancellationToken); 
          await tmp589.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp590)
        {
          var tmp591 = $"Error occurred in {GetType().FullName}: {tmp590.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp590, tmp591);
          else
            Console.Error.WriteLine(tmp591);
          var tmp592 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Exception, seqid), cancellationToken);
          await tmp592.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTypeInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp593 = new InternalStructs.GetTypeInfo_args();
        await tmp593.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp594 = new InternalStructs.GetTypeInfo_result();
        try
        {
          tmp594.Success = await _iAsync.GetTypeInfo(tmp593.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp594.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp595)
        {
          var tmp596 = $"Error occurred in {GetType().FullName}: {tmp595.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp595, tmp596);
          else
            Console.Error.WriteLine(tmp596);
          var tmp597 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp597.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCatalogs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp598 = new InternalStructs.GetCatalogs_args();
        await tmp598.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp599 = new InternalStructs.GetCatalogs_result();
        try
        {
          tmp599.Success = await _iAsync.GetCatalogs(tmp598.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp599.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp600)
        {
          var tmp601 = $"Error occurred in {GetType().FullName}: {tmp600.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp600, tmp601);
          else
            Console.Error.WriteLine(tmp601);
          var tmp602 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Exception, seqid), cancellationToken);
          await tmp602.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSchemas_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp603 = new InternalStructs.GetSchemas_args();
        await tmp603.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp604 = new InternalStructs.GetSchemas_result();
        try
        {
          tmp604.Success = await _iAsync.GetSchemas(tmp603.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Reply, seqid), cancellationToken); 
          await tmp604.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp605)
        {
          var tmp606 = $"Error occurred in {GetType().FullName}: {tmp605.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp605, tmp606);
          else
            Console.Error.WriteLine(tmp606);
          var tmp607 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Exception, seqid), cancellationToken);
          await tmp607.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp608 = new InternalStructs.GetTables_args();
        await tmp608.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp609 = new InternalStructs.GetTables_result();
        try
        {
          tmp609.Success = await _iAsync.GetTables(tmp608.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Reply, seqid), cancellationToken); 
          await tmp609.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp610)
        {
          var tmp611 = $"Error occurred in {GetType().FullName}: {tmp610.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp610, tmp611);
          else
            Console.Error.WriteLine(tmp611);
          var tmp612 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Exception, seqid), cancellationToken);
          await tmp612.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTableTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp613 = new InternalStructs.GetTableTypes_args();
        await tmp613.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp614 = new InternalStructs.GetTableTypes_result();
        try
        {
          tmp614.Success = await _iAsync.GetTableTypes(tmp613.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp614.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp615)
        {
          var tmp616 = $"Error occurred in {GetType().FullName}: {tmp615.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp615, tmp616);
          else
            Console.Error.WriteLine(tmp616);
          var tmp617 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp617.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp618 = new InternalStructs.GetColumns_args();
        await tmp618.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp619 = new InternalStructs.GetColumns_result();
        try
        {
          tmp619.Success = await _iAsync.GetColumns(tmp618.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp619.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp620)
        {
          var tmp621 = $"Error occurred in {GetType().FullName}: {tmp620.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp620, tmp621);
          else
            Console.Error.WriteLine(tmp621);
          var tmp622 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp622.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetFunctions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp623 = new InternalStructs.GetFunctions_args();
        await tmp623.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp624 = new InternalStructs.GetFunctions_result();
        try
        {
          tmp624.Success = await _iAsync.GetFunctions(tmp623.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp624.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp625)
        {
          var tmp626 = $"Error occurred in {GetType().FullName}: {tmp625.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp625, tmp626);
          else
            Console.Error.WriteLine(tmp626);
          var tmp627 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Exception, seqid), cancellationToken);
          await tmp627.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetPrimaryKeys_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp628 = new InternalStructs.GetPrimaryKeys_args();
        await tmp628.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp629 = new InternalStructs.GetPrimaryKeys_result();
        try
        {
          tmp629.Success = await _iAsync.GetPrimaryKeys(tmp628.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Reply, seqid), cancellationToken); 
          await tmp629.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp630)
        {
          var tmp631 = $"Error occurred in {GetType().FullName}: {tmp630.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp630, tmp631);
          else
            Console.Error.WriteLine(tmp631);
          var tmp632 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Exception, seqid), cancellationToken);
          await tmp632.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCrossReference_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp633 = new InternalStructs.GetCrossReference_args();
        await tmp633.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp634 = new InternalStructs.GetCrossReference_result();
        try
        {
          tmp634.Success = await _iAsync.GetCrossReference(tmp633.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Reply, seqid), cancellationToken); 
          await tmp634.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp635)
        {
          var tmp636 = $"Error occurred in {GetType().FullName}: {tmp635.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp635, tmp636);
          else
            Console.Error.WriteLine(tmp636);
          var tmp637 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Exception, seqid), cancellationToken);
          await tmp637.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetOperationStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp638 = new InternalStructs.GetOperationStatus_args();
        await tmp638.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp639 = new InternalStructs.GetOperationStatus_result();
        try
        {
          tmp639.Success = await _iAsync.GetOperationStatus(tmp638.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Reply, seqid), cancellationToken); 
          await tmp639.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp640)
        {
          var tmp641 = $"Error occurred in {GetType().FullName}: {tmp640.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp640, tmp641);
          else
            Console.Error.WriteLine(tmp641);
          var tmp642 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Exception, seqid), cancellationToken);
          await tmp642.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp643 = new InternalStructs.CancelOperation_args();
        await tmp643.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp644 = new InternalStructs.CancelOperation_result();
        try
        {
          tmp644.Success = await _iAsync.CancelOperation(tmp643.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Reply, seqid), cancellationToken); 
          await tmp644.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp645)
        {
          var tmp646 = $"Error occurred in {GetType().FullName}: {tmp645.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp645, tmp646);
          else
            Console.Error.WriteLine(tmp646);
          var tmp647 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp647.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp648 = new InternalStructs.CloseOperation_args();
        await tmp648.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp649 = new InternalStructs.CloseOperation_result();
        try
        {
          tmp649.Success = await _iAsync.CloseOperation(tmp648.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Reply, seqid), cancellationToken); 
          await tmp649.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp650)
        {
          var tmp651 = $"Error occurred in {GetType().FullName}: {tmp650.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp650, tmp651);
          else
            Console.Error.WriteLine(tmp651);
          var tmp652 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp652.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetResultSetMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp653 = new InternalStructs.GetResultSetMetadata_args();
        await tmp653.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp654 = new InternalStructs.GetResultSetMetadata_result();
        try
        {
          tmp654.Success = await _iAsync.GetResultSetMetadata(tmp653.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Reply, seqid), cancellationToken); 
          await tmp654.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp655)
        {
          var tmp656 = $"Error occurred in {GetType().FullName}: {tmp655.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp655, tmp656);
          else
            Console.Error.WriteLine(tmp656);
          var tmp657 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Exception, seqid), cancellationToken);
          await tmp657.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task FetchResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp658 = new InternalStructs.FetchResults_args();
        await tmp658.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp659 = new InternalStructs.FetchResults_result();
        try
        {
          tmp659.Success = await _iAsync.FetchResults(tmp658.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Reply, seqid), cancellationToken); 
          await tmp659.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp660)
        {
          var tmp661 = $"Error occurred in {GetType().FullName}: {tmp660.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp660, tmp661);
          else
            Console.Error.WriteLine(tmp661);
          var tmp662 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Exception, seqid), cancellationToken);
          await tmp662.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp663 = new InternalStructs.GetDelegationToken_args();
        await tmp663.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp664 = new InternalStructs.GetDelegationToken_result();
        try
        {
          tmp664.Success = await _iAsync.GetDelegationToken(tmp663.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp664.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp665)
        {
          var tmp666 = $"Error occurred in {GetType().FullName}: {tmp665.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp665, tmp666);
          else
            Console.Error.WriteLine(tmp666);
          var tmp667 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp667.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp668 = new InternalStructs.CancelDelegationToken_args();
        await tmp668.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp669 = new InternalStructs.CancelDelegationToken_result();
        try
        {
          tmp669.Success = await _iAsync.CancelDelegationToken(tmp668.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp669.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp670)
        {
          var tmp671 = $"Error occurred in {GetType().FullName}: {tmp670.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp670, tmp671);
          else
            Console.Error.WriteLine(tmp671);
          var tmp672 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp672.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RenewDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp673 = new InternalStructs.RenewDelegationToken_args();
        await tmp673.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp674 = new InternalStructs.RenewDelegationToken_result();
        try
        {
          tmp674.Success = await _iAsync.RenewDelegationToken(tmp673.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp674.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp675)
        {
          var tmp676 = $"Error occurred in {GetType().FullName}: {tmp675.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp675, tmp676);
          else
            Console.Error.WriteLine(tmp676);
          var tmp677 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp677.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class OpenSession_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public OpenSession_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp678 = new TStruct("OpenSession_args");
            await oprot.WriteStructBeginAsync(tmp678, cancellationToken);
            var tmp679 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp679.Name = "req";
              tmp679.Type = TType.Struct;
              tmp679.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp679, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not OpenSession_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp680 = new StringBuilder("OpenSession_args(");
          int tmp681 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp681++) { tmp680.Append(", "); }
            tmp680.Append("Req: ");
            Req.ToString(tmp680);
          }
          tmp680.Append(')');
          return tmp680.ToString();
        }
      }


      public partial class OpenSession_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public OpenSession_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOpenSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp682 = new TStruct("OpenSession_result");
            await oprot.WriteStructBeginAsync(tmp682, cancellationToken);
            var tmp683 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp683.Name = "Success";
                tmp683.Type = TType.Struct;
                tmp683.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp683, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not OpenSession_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp684 = new StringBuilder("OpenSession_result(");
          int tmp685 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp685++) { tmp684.Append(", "); }
            tmp684.Append("Success: ");
            Success.ToString(tmp684);
          }
          tmp684.Append(')');
          return tmp684.ToString();
        }
      }


      public partial class CloseSession_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CloseSession_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp686 = new TStruct("CloseSession_args");
            await oprot.WriteStructBeginAsync(tmp686, cancellationToken);
            var tmp687 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp687.Name = "req";
              tmp687.Type = TType.Struct;
              tmp687.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp687, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CloseSession_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp688 = new StringBuilder("CloseSession_args(");
          int tmp689 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp689++) { tmp688.Append(", "); }
            tmp688.Append("Req: ");
            Req.ToString(tmp688);
          }
          tmp688.Append(')');
          return tmp688.ToString();
        }
      }


      public partial class CloseSession_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CloseSession_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp690 = new TStruct("CloseSession_result");
            await oprot.WriteStructBeginAsync(tmp690, cancellationToken);
            var tmp691 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp691.Name = "Success";
                tmp691.Type = TType.Struct;
                tmp691.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp691, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CloseSession_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp692 = new StringBuilder("CloseSession_result(");
          int tmp693 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp693++) { tmp692.Append(", "); }
            tmp692.Append("Success: ");
            Success.ToString(tmp692);
          }
          tmp692.Append(')');
          return tmp692.ToString();
        }
      }


      public partial class GetInfo_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp694 = new TStruct("GetInfo_args");
            await oprot.WriteStructBeginAsync(tmp694, cancellationToken);
            var tmp695 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp695.Name = "req";
              tmp695.Type = TType.Struct;
              tmp695.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp695, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetInfo_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp696 = new StringBuilder("GetInfo_args(");
          int tmp697 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp697++) { tmp696.Append(", "); }
            tmp696.Append("Req: ");
            Req.ToString(tmp696);
          }
          tmp696.Append(')');
          return tmp696.ToString();
        }
      }


      public partial class GetInfo_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp698 = new TStruct("GetInfo_result");
            await oprot.WriteStructBeginAsync(tmp698, cancellationToken);
            var tmp699 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp699.Name = "Success";
                tmp699.Type = TType.Struct;
                tmp699.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp699, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetInfo_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp700 = new StringBuilder("GetInfo_result(");
          int tmp701 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp701++) { tmp700.Append(", "); }
            tmp700.Append("Success: ");
            Success.ToString(tmp700);
          }
          tmp700.Append(')');
          return tmp700.ToString();
        }
      }


      public partial class ExecuteStatement_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public ExecuteStatement_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp702 = new TStruct("ExecuteStatement_args");
            await oprot.WriteStructBeginAsync(tmp702, cancellationToken);
            var tmp703 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp703.Name = "req";
              tmp703.Type = TType.Struct;
              tmp703.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp703, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not ExecuteStatement_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp704 = new StringBuilder("ExecuteStatement_args(");
          int tmp705 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp705++) { tmp704.Append(", "); }
            tmp704.Append("Req: ");
            Req.ToString(tmp704);
          }
          tmp704.Append(')');
          return tmp704.ToString();
        }
      }


      public partial class ExecuteStatement_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ExecuteStatement_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TExecuteStatementResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp706 = new TStruct("ExecuteStatement_result");
            await oprot.WriteStructBeginAsync(tmp706, cancellationToken);
            var tmp707 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp707.Name = "Success";
                tmp707.Type = TType.Struct;
                tmp707.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp707, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not ExecuteStatement_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp708 = new StringBuilder("ExecuteStatement_result(");
          int tmp709 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp709++) { tmp708.Append(", "); }
            tmp708.Append("Success: ");
            Success.ToString(tmp708);
          }
          tmp708.Append(')');
          return tmp708.ToString();
        }
      }


      public partial class GetTypeInfo_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetTypeInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp710 = new TStruct("GetTypeInfo_args");
            await oprot.WriteStructBeginAsync(tmp710, cancellationToken);
            var tmp711 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp711.Name = "req";
              tmp711.Type = TType.Struct;
              tmp711.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp711, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetTypeInfo_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp712 = new StringBuilder("GetTypeInfo_args(");
          int tmp713 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp713++) { tmp712.Append(", "); }
            tmp712.Append("Req: ");
            Req.ToString(tmp712);
          }
          tmp712.Append(')');
          return tmp712.ToString();
        }
      }


      public partial class GetTypeInfo_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetTypeInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTypeInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp714 = new TStruct("GetTypeInfo_result");
            await oprot.WriteStructBeginAsync(tmp714, cancellationToken);
            var tmp715 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp715.Name = "Success";
                tmp715.Type = TType.Struct;
                tmp715.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp715, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetTypeInfo_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp716 = new StringBuilder("GetTypeInfo_result(");
          int tmp717 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp717++) { tmp716.Append(", "); }
            tmp716.Append("Success: ");
            Success.ToString(tmp716);
          }
          tmp716.Append(')');
          return tmp716.ToString();
        }
      }


      public partial class GetCatalogs_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetCatalogs_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp718 = new TStruct("GetCatalogs_args");
            await oprot.WriteStructBeginAsync(tmp718, cancellationToken);
            var tmp719 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp719.Name = "req";
              tmp719.Type = TType.Struct;
              tmp719.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp719, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCatalogs_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp720 = new StringBuilder("GetCatalogs_args(");
          int tmp721 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp721++) { tmp720.Append(", "); }
            tmp720.Append("Req: ");
            Req.ToString(tmp720);
          }
          tmp720.Append(')');
          return tmp720.ToString();
        }
      }


      public partial class GetCatalogs_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetCatalogs_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCatalogsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp722 = new TStruct("GetCatalogs_result");
            await oprot.WriteStructBeginAsync(tmp722, cancellationToken);
            var tmp723 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp723.Name = "Success";
                tmp723.Type = TType.Struct;
                tmp723.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp723, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCatalogs_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp724 = new StringBuilder("GetCatalogs_result(");
          int tmp725 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp725++) { tmp724.Append(", "); }
            tmp724.Append("Success: ");
            Success.ToString(tmp724);
          }
          tmp724.Append(')');
          return tmp724.ToString();
        }
      }


      public partial class GetSchemas_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetSchemas_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp726 = new TStruct("GetSchemas_args");
            await oprot.WriteStructBeginAsync(tmp726, cancellationToken);
            var tmp727 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp727.Name = "req";
              tmp727.Type = TType.Struct;
              tmp727.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp727, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetSchemas_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp728 = new StringBuilder("GetSchemas_args(");
          int tmp729 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp729++) { tmp728.Append(", "); }
            tmp728.Append("Req: ");
            Req.ToString(tmp728);
          }
          tmp728.Append(')');
          return tmp728.ToString();
        }
      }


      public partial class GetSchemas_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetSchemas_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetSchemasResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp730 = new TStruct("GetSchemas_result");
            await oprot.WriteStructBeginAsync(tmp730, cancellationToken);
            var tmp731 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp731.Name = "Success";
                tmp731.Type = TType.Struct;
                tmp731.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp731, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetSchemas_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp732 = new StringBuilder("GetSchemas_result(");
          int tmp733 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp733++) { tmp732.Append(", "); }
            tmp732.Append("Success: ");
            Success.ToString(tmp732);
          }
          tmp732.Append(')');
          return tmp732.ToString();
        }
      }


      public partial class GetTables_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetTables_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp734 = new TStruct("GetTables_args");
            await oprot.WriteStructBeginAsync(tmp734, cancellationToken);
            var tmp735 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp735.Name = "req";
              tmp735.Type = TType.Struct;
              tmp735.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp735, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetTables_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp736 = new StringBuilder("GetTables_args(");
          int tmp737 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp737++) { tmp736.Append(", "); }
            tmp736.Append("Req: ");
            Req.ToString(tmp736);
          }
          tmp736.Append(')');
          return tmp736.ToString();
        }
      }


      public partial class GetTables_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetTables_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTablesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp738 = new TStruct("GetTables_result");
            await oprot.WriteStructBeginAsync(tmp738, cancellationToken);
            var tmp739 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp739.Name = "Success";
                tmp739.Type = TType.Struct;
                tmp739.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp739, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetTables_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp740 = new StringBuilder("GetTables_result(");
          int tmp741 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp741++) { tmp740.Append(", "); }
            tmp740.Append("Success: ");
            Success.ToString(tmp740);
          }
          tmp740.Append(')');
          return tmp740.ToString();
        }
      }


      public partial class GetTableTypes_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetTableTypes_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp742 = new TStruct("GetTableTypes_args");
            await oprot.WriteStructBeginAsync(tmp742, cancellationToken);
            var tmp743 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp743.Name = "req";
              tmp743.Type = TType.Struct;
              tmp743.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp743, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetTableTypes_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp744 = new StringBuilder("GetTableTypes_args(");
          int tmp745 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp745++) { tmp744.Append(", "); }
            tmp744.Append("Req: ");
            Req.ToString(tmp744);
          }
          tmp744.Append(')');
          return tmp744.ToString();
        }
      }


      public partial class GetTableTypes_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetTableTypes_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetTableTypesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp746 = new TStruct("GetTableTypes_result");
            await oprot.WriteStructBeginAsync(tmp746, cancellationToken);
            var tmp747 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp747.Name = "Success";
                tmp747.Type = TType.Struct;
                tmp747.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp747, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetTableTypes_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp748 = new StringBuilder("GetTableTypes_result(");
          int tmp749 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp749++) { tmp748.Append(", "); }
            tmp748.Append("Success: ");
            Success.ToString(tmp748);
          }
          tmp748.Append(')');
          return tmp748.ToString();
        }
      }


      public partial class GetColumns_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetColumns_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp750 = new TStruct("GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp750, cancellationToken);
            var tmp751 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp751.Name = "req";
              tmp751.Type = TType.Struct;
              tmp751.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp751, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp752 = new StringBuilder("GetColumns_args(");
          int tmp753 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp753++) { tmp752.Append(", "); }
            tmp752.Append("Req: ");
            Req.ToString(tmp752);
          }
          tmp752.Append(')');
          return tmp752.ToString();
        }
      }


      public partial class GetColumns_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetColumnsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp754 = new TStruct("GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp754, cancellationToken);
            var tmp755 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp755.Name = "Success";
                tmp755.Type = TType.Struct;
                tmp755.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp755, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp756 = new StringBuilder("GetColumns_result(");
          int tmp757 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp757++) { tmp756.Append(", "); }
            tmp756.Append("Success: ");
            Success.ToString(tmp756);
          }
          tmp756.Append(')');
          return tmp756.ToString();
        }
      }


      public partial class GetFunctions_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetFunctions_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp758 = new TStruct("GetFunctions_args");
            await oprot.WriteStructBeginAsync(tmp758, cancellationToken);
            var tmp759 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp759.Name = "req";
              tmp759.Type = TType.Struct;
              tmp759.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp759, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetFunctions_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp760 = new StringBuilder("GetFunctions_args(");
          int tmp761 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp761++) { tmp760.Append(", "); }
            tmp760.Append("Req: ");
            Req.ToString(tmp760);
          }
          tmp760.Append(')');
          return tmp760.ToString();
        }
      }


      public partial class GetFunctions_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetFunctions_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetFunctionsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp762 = new TStruct("GetFunctions_result");
            await oprot.WriteStructBeginAsync(tmp762, cancellationToken);
            var tmp763 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp763.Name = "Success";
                tmp763.Type = TType.Struct;
                tmp763.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp763, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetFunctions_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp764 = new StringBuilder("GetFunctions_result(");
          int tmp765 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp765++) { tmp764.Append(", "); }
            tmp764.Append("Success: ");
            Success.ToString(tmp764);
          }
          tmp764.Append(')');
          return tmp764.ToString();
        }
      }


      public partial class GetPrimaryKeys_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetPrimaryKeys_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp766 = new TStruct("GetPrimaryKeys_args");
            await oprot.WriteStructBeginAsync(tmp766, cancellationToken);
            var tmp767 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp767.Name = "req";
              tmp767.Type = TType.Struct;
              tmp767.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp767, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetPrimaryKeys_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp768 = new StringBuilder("GetPrimaryKeys_args(");
          int tmp769 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp769++) { tmp768.Append(", "); }
            tmp768.Append("Req: ");
            Req.ToString(tmp768);
          }
          tmp768.Append(')');
          return tmp768.ToString();
        }
      }


      public partial class GetPrimaryKeys_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetPrimaryKeys_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetPrimaryKeysResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp770 = new TStruct("GetPrimaryKeys_result");
            await oprot.WriteStructBeginAsync(tmp770, cancellationToken);
            var tmp771 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp771.Name = "Success";
                tmp771.Type = TType.Struct;
                tmp771.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp771, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetPrimaryKeys_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp772 = new StringBuilder("GetPrimaryKeys_result(");
          int tmp773 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp773++) { tmp772.Append(", "); }
            tmp772.Append("Success: ");
            Success.ToString(tmp772);
          }
          tmp772.Append(')');
          return tmp772.ToString();
        }
      }


      public partial class GetCrossReference_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetCrossReference_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp774 = new TStruct("GetCrossReference_args");
            await oprot.WriteStructBeginAsync(tmp774, cancellationToken);
            var tmp775 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp775.Name = "req";
              tmp775.Type = TType.Struct;
              tmp775.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp775, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCrossReference_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp776 = new StringBuilder("GetCrossReference_args(");
          int tmp777 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp777++) { tmp776.Append(", "); }
            tmp776.Append("Req: ");
            Req.ToString(tmp776);
          }
          tmp776.Append(')');
          return tmp776.ToString();
        }
      }


      public partial class GetCrossReference_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetCrossReference_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetCrossReferenceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp778 = new TStruct("GetCrossReference_result");
            await oprot.WriteStructBeginAsync(tmp778, cancellationToken);
            var tmp779 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp779.Name = "Success";
                tmp779.Type = TType.Struct;
                tmp779.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp779, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCrossReference_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp780 = new StringBuilder("GetCrossReference_result(");
          int tmp781 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp781++) { tmp780.Append(", "); }
            tmp780.Append("Success: ");
            Success.ToString(tmp780);
          }
          tmp780.Append(')');
          return tmp780.ToString();
        }
      }


      public partial class GetOperationStatus_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetOperationStatus_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp782 = new TStruct("GetOperationStatus_args");
            await oprot.WriteStructBeginAsync(tmp782, cancellationToken);
            var tmp783 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp783.Name = "req";
              tmp783.Type = TType.Struct;
              tmp783.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp783, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetOperationStatus_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp784 = new StringBuilder("GetOperationStatus_args(");
          int tmp785 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp785++) { tmp784.Append(", "); }
            tmp784.Append("Req: ");
            Req.ToString(tmp784);
          }
          tmp784.Append(')');
          return tmp784.ToString();
        }
      }


      public partial class GetOperationStatus_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetOperationStatus_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp786 = new TStruct("GetOperationStatus_result");
            await oprot.WriteStructBeginAsync(tmp786, cancellationToken);
            var tmp787 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp787.Name = "Success";
                tmp787.Type = TType.Struct;
                tmp787.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp787, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetOperationStatus_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp788 = new StringBuilder("GetOperationStatus_result(");
          int tmp789 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp789++) { tmp788.Append(", "); }
            tmp788.Append("Success: ");
            Success.ToString(tmp788);
          }
          tmp788.Append(')');
          return tmp788.ToString();
        }
      }


      public partial class CancelOperation_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CancelOperation_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp790 = new TStruct("CancelOperation_args");
            await oprot.WriteStructBeginAsync(tmp790, cancellationToken);
            var tmp791 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp791.Name = "req";
              tmp791.Type = TType.Struct;
              tmp791.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp791, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CancelOperation_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp792 = new StringBuilder("CancelOperation_args(");
          int tmp793 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp793++) { tmp792.Append(", "); }
            tmp792.Append("Req: ");
            Req.ToString(tmp792);
          }
          tmp792.Append(')');
          return tmp792.ToString();
        }
      }


      public partial class CancelOperation_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CancelOperation_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp794 = new TStruct("CancelOperation_result");
            await oprot.WriteStructBeginAsync(tmp794, cancellationToken);
            var tmp795 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp795.Name = "Success";
                tmp795.Type = TType.Struct;
                tmp795.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp795, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CancelOperation_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp796 = new StringBuilder("CancelOperation_result(");
          int tmp797 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp797++) { tmp796.Append(", "); }
            tmp796.Append("Success: ");
            Success.ToString(tmp796);
          }
          tmp796.Append(')');
          return tmp796.ToString();
        }
      }


      public partial class CloseOperation_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CloseOperation_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp798 = new TStruct("CloseOperation_args");
            await oprot.WriteStructBeginAsync(tmp798, cancellationToken);
            var tmp799 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp799.Name = "req";
              tmp799.Type = TType.Struct;
              tmp799.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp799, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CloseOperation_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp800 = new StringBuilder("CloseOperation_args(");
          int tmp801 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp801++) { tmp800.Append(", "); }
            tmp800.Append("Req: ");
            Req.ToString(tmp800);
          }
          tmp800.Append(')');
          return tmp800.ToString();
        }
      }


      public partial class CloseOperation_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CloseOperation_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp802 = new TStruct("CloseOperation_result");
            await oprot.WriteStructBeginAsync(tmp802, cancellationToken);
            var tmp803 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp803.Name = "Success";
                tmp803.Type = TType.Struct;
                tmp803.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp803, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CloseOperation_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp804 = new StringBuilder("CloseOperation_result(");
          int tmp805 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp805++) { tmp804.Append(", "); }
            tmp804.Append("Success: ");
            Success.ToString(tmp804);
          }
          tmp804.Append(')');
          return tmp804.ToString();
        }
      }


      public partial class GetResultSetMetadata_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetResultSetMetadata_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp806 = new TStruct("GetResultSetMetadata_args");
            await oprot.WriteStructBeginAsync(tmp806, cancellationToken);
            var tmp807 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp807.Name = "req";
              tmp807.Type = TType.Struct;
              tmp807.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp807, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetResultSetMetadata_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp808 = new StringBuilder("GetResultSetMetadata_args(");
          int tmp809 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp809++) { tmp808.Append(", "); }
            tmp808.Append("Req: ");
            Req.ToString(tmp808);
          }
          tmp808.Append(')');
          return tmp808.ToString();
        }
      }


      public partial class GetResultSetMetadata_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetResultSetMetadata_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp810 = new TStruct("GetResultSetMetadata_result");
            await oprot.WriteStructBeginAsync(tmp810, cancellationToken);
            var tmp811 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp811.Name = "Success";
                tmp811.Type = TType.Struct;
                tmp811.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp811, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetResultSetMetadata_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp812 = new StringBuilder("GetResultSetMetadata_result(");
          int tmp813 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp813++) { tmp812.Append(", "); }
            tmp812.Append("Success: ");
            Success.ToString(tmp812);
          }
          tmp812.Append(')');
          return tmp812.ToString();
        }
      }


      public partial class FetchResults_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public FetchResults_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp814 = new TStruct("FetchResults_args");
            await oprot.WriteStructBeginAsync(tmp814, cancellationToken);
            var tmp815 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp815.Name = "req";
              tmp815.Type = TType.Struct;
              tmp815.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp815, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not FetchResults_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp816 = new StringBuilder("FetchResults_args(");
          int tmp817 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp817++) { tmp816.Append(", "); }
            tmp816.Append("Req: ");
            Req.ToString(tmp816);
          }
          tmp816.Append(')');
          return tmp816.ToString();
        }
      }


      public partial class FetchResults_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public FetchResults_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp818 = new TStruct("FetchResults_result");
            await oprot.WriteStructBeginAsync(tmp818, cancellationToken);
            var tmp819 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp819.Name = "Success";
                tmp819.Type = TType.Struct;
                tmp819.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp819, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not FetchResults_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp820 = new StringBuilder("FetchResults_result(");
          int tmp821 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp821++) { tmp820.Append(", "); }
            tmp820.Append("Success: ");
            Success.ToString(tmp820);
          }
          tmp820.Append(')');
          return tmp820.ToString();
        }
      }


      public partial class GetDelegationToken_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp822 = new TStruct("GetDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp822, cancellationToken);
            var tmp823 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp823.Name = "req";
              tmp823.Type = TType.Struct;
              tmp823.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp823, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetDelegationToken_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp824 = new StringBuilder("GetDelegationToken_args(");
          int tmp825 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp825++) { tmp824.Append(", "); }
            tmp824.Append("Req: ");
            Req.ToString(tmp824);
          }
          tmp824.Append(')');
          return tmp824.ToString();
        }
      }


      public partial class GetDelegationToken_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TGetDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp826 = new TStruct("GetDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp826, cancellationToken);
            var tmp827 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp827.Name = "Success";
                tmp827.Type = TType.Struct;
                tmp827.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp827, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetDelegationToken_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp828 = new StringBuilder("GetDelegationToken_result(");
          int tmp829 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp829++) { tmp828.Append(", "); }
            tmp828.Append("Success: ");
            Success.ToString(tmp828);
          }
          tmp828.Append(')');
          return tmp828.ToString();
        }
      }


      public partial class CancelDelegationToken_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CancelDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp830 = new TStruct("CancelDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp830, cancellationToken);
            var tmp831 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp831.Name = "req";
              tmp831.Type = TType.Struct;
              tmp831.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp831, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CancelDelegationToken_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp832 = new StringBuilder("CancelDelegationToken_args(");
          int tmp833 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp833++) { tmp832.Append(", "); }
            tmp832.Append("Req: ");
            Req.ToString(tmp832);
          }
          tmp832.Append(')');
          return tmp832.ToString();
        }
      }


      public partial class CancelDelegationToken_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CancelDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TCancelDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp834 = new TStruct("CancelDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp834, cancellationToken);
            var tmp835 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp835.Name = "Success";
                tmp835.Type = TType.Struct;
                tmp835.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp835, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CancelDelegationToken_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp836 = new StringBuilder("CancelDelegationToken_result(");
          int tmp837 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp837++) { tmp836.Append(", "); }
            tmp836.Append("Success: ");
            Success.ToString(tmp836);
          }
          tmp836.Append(')');
          return tmp836.ToString();
        }
      }


      public partial class RenewDelegationToken_args : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenReq? _req;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenReq? Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public RenewDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp838 = new TStruct("RenewDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp838, cancellationToken);
            var tmp839 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp839.Name = "req";
              tmp839.Type = TType.Struct;
              tmp839.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RenewDelegationToken_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp840 = new StringBuilder("RenewDelegationToken_args(");
          int tmp841 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp841++) { tmp840.Append(", "); }
            tmp840.Append("Req: ");
            Req.ToString(tmp840);
          }
          tmp840.Append(')');
          return tmp840.ToString();
        }
      }


      public partial class RenewDelegationToken_result : TBase
      {
        private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenResp? _success;

        public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenResp? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public RenewDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRenewDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp842 = new TStruct("RenewDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp842, cancellationToken);
            var tmp843 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp843.Name = "Success";
                tmp843.Type = TType.Struct;
                tmp843.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp843, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RenewDelegationToken_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp844 = new StringBuilder("RenewDelegationToken_result(");
          int tmp845 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp845++) { tmp844.Append(", "); }
            tmp844.Append("Success: ");
            Success.ToString(tmp844);
          }
          tmp844.Append(')');
          return tmp844.ToString();
        }
      }

    }

  }
}
