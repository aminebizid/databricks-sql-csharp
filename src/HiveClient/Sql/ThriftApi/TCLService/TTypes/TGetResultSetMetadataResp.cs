/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TGetResultSetMetadataResp : TBase
  {
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TStatus? _status;
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TTableSchema? _schema;
    private int _resultFormat;
    private bool _lz4Compressed;
    private byte[]? _arrowSchema;

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TStatus? Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TTableSchema? Schema
    {
      get
      {
        return _schema;
      }
      set
      {
        __isset.schema = true;
        this._schema = value;
      }
    }

    public int ResultFormat
    {
      get
      {
        return _resultFormat;
      }
      set
      {
        __isset.resultFormat = true;
        this._resultFormat = value;
      }
    }

    public bool Lz4Compressed
    {
      get
      {
        return _lz4Compressed;
      }
      set
      {
        __isset.lz4Compressed = true;
        this._lz4Compressed = value;
      }
    }

    public byte[]? ArrowSchema
    {
      get
      {
        return _arrowSchema;
      }
      set
      {
        __isset.arrowSchema = true;
        this._arrowSchema = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool status;
      public bool schema;
      public bool resultFormat;
      public bool lz4Compressed;
      public bool arrowSchema;
    }

    public TGetResultSetMetadataResp()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TStatus();
                await Status.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Schema = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TTableSchema();
                await Schema.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.I32)
              {
                ResultFormat = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.Bool)
              {
                Lz4Compressed = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.String)
              {
                ArrowSchema = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp437 = new TStruct("TGetResultSetMetadataResp");
        await oprot.WriteStructBeginAsync(tmp437, cancellationToken);
        var tmp438 = new TField();
        if((Status != null) && __isset.status)
        {
          tmp438.Name = "status";
          tmp438.Type = TType.Struct;
          tmp438.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
          await Status.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Schema != null) && __isset.schema)
        {
          tmp438.Name = "schema";
          tmp438.Type = TType.Struct;
          tmp438.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
          await Schema.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.resultFormat)
        {
          tmp438.Name = "resultFormat";
          tmp438.Type = TType.I32;
          tmp438.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
          await oprot.WriteI32Async(ResultFormat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lz4Compressed)
        {
          tmp438.Name = "lz4Compressed";
          tmp438.Type = TType.Bool;
          tmp438.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
          await oprot.WriteBoolAsync(Lz4Compressed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ArrowSchema != null) && __isset.arrowSchema)
        {
          tmp438.Name = "arrowSchema";
          tmp438.Type = TType.String;
          tmp438.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
          await oprot.WriteBinaryAsync(ArrowSchema, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TGetResultSetMetadataResp other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.status == other.__isset.status) && ((!__isset.status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))))
        && ((__isset.resultFormat == other.__isset.resultFormat) && ((!__isset.resultFormat) || (global::System.Object.Equals(ResultFormat, other.ResultFormat))))
        && ((__isset.lz4Compressed == other.__isset.lz4Compressed) && ((!__isset.lz4Compressed) || (global::System.Object.Equals(Lz4Compressed, other.Lz4Compressed))))
        && ((__isset.arrowSchema == other.__isset.arrowSchema) && ((!__isset.arrowSchema) || (TCollections.Equals(ArrowSchema, other.ArrowSchema))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Status != null) && __isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if((Schema != null) && __isset.schema)
        {
          hashcode = (hashcode * 397) + Schema.GetHashCode();
        }
        if(__isset.resultFormat)
        {
          hashcode = (hashcode * 397) + ResultFormat.GetHashCode();
        }
        if(__isset.lz4Compressed)
        {
          hashcode = (hashcode * 397) + Lz4Compressed.GetHashCode();
        }
        if((ArrowSchema != null) && __isset.arrowSchema)
        {
          hashcode = (hashcode * 397) + ArrowSchema.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp439 = new StringBuilder("TGetResultSetMetadataResp(");
      int tmp440 = 0;
      if((Status != null) && __isset.status)
      {
        if(0 < tmp440++) { tmp439.Append(", "); }
        tmp439.Append("Status: ");
        Status.ToString(tmp439);
      }
      if((Schema != null) && __isset.schema)
      {
        if(0 < tmp440++) { tmp439.Append(", "); }
        tmp439.Append("Schema: ");
        Schema.ToString(tmp439);
      }
      if(__isset.resultFormat)
      {
        if(0 < tmp440++) { tmp439.Append(", "); }
        tmp439.Append("ResultFormat: ");
        ResultFormat.ToString(tmp439);
      }
      if(__isset.lz4Compressed)
      {
        if(0 < tmp440++) { tmp439.Append(", "); }
        tmp439.Append("Lz4Compressed: ");
        Lz4Compressed.ToString(tmp439);
      }
      if((ArrowSchema != null) && __isset.arrowSchema)
      {
        if(0 < tmp440++) { tmp439.Append(", "); }
        tmp439.Append("ArrowSchema: ");
        ArrowSchema.ToString(tmp439);
      }
      tmp439.Append(')');
      return tmp439.ToString();
    }
  }

}
