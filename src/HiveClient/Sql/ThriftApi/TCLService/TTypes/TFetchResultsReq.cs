/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TFetchResultsReq : TBase
  {
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOperationHandle? _operationHandle;
    private int _orientation;
    private long _maxRows;
    private short _fetchType;
    private long _maxBytes;
    private long _startRowOffset;
    private bool _includeResultSetMetadata;

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOperationHandle? OperationHandle
    {
      get
      {
        return _operationHandle;
      }
      set
      {
        __isset.operationHandle = true;
        this._operationHandle = value;
      }
    }

    public int Orientation
    {
      get
      {
        return _orientation;
      }
      set
      {
        __isset.orientation = true;
        this._orientation = value;
      }
    }

    public long MaxRows
    {
      get
      {
        return _maxRows;
      }
      set
      {
        __isset.maxRows = true;
        this._maxRows = value;
      }
    }

    public short FetchType
    {
      get
      {
        return _fetchType;
      }
      set
      {
        __isset.fetchType = true;
        this._fetchType = value;
      }
    }

    public long MaxBytes
    {
      get
      {
        return _maxBytes;
      }
      set
      {
        __isset.maxBytes = true;
        this._maxBytes = value;
      }
    }

    public long StartRowOffset
    {
      get
      {
        return _startRowOffset;
      }
      set
      {
        __isset.startRowOffset = true;
        this._startRowOffset = value;
      }
    }

    public bool IncludeResultSetMetadata
    {
      get
      {
        return _includeResultSetMetadata;
      }
      set
      {
        __isset.includeResultSetMetadata = true;
        this._includeResultSetMetadata = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool operationHandle;
      public bool orientation;
      public bool maxRows;
      public bool fetchType;
      public bool maxBytes;
      public bool startRowOffset;
      public bool includeResultSetMetadata;
    }

    public TFetchResultsReq()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                OperationHandle = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TOperationHandle();
                await OperationHandle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Orientation = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                MaxRows = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I16)
              {
                FetchType = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.I64)
              {
                MaxBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.Bool)
              {
                IncludeResultSetMetadata = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp441 = new TStruct("TFetchResultsReq");
        await oprot.WriteStructBeginAsync(tmp441, cancellationToken);
        var tmp442 = new TField();
        if((OperationHandle != null) && __isset.operationHandle)
        {
          tmp442.Name = "operationHandle";
          tmp442.Type = TType.Struct;
          tmp442.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await OperationHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.orientation)
        {
          tmp442.Name = "orientation";
          tmp442.Type = TType.I32;
          tmp442.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await oprot.WriteI32Async(Orientation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxRows)
        {
          tmp442.Name = "maxRows";
          tmp442.Type = TType.I64;
          tmp442.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await oprot.WriteI64Async(MaxRows, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.fetchType)
        {
          tmp442.Name = "fetchType";
          tmp442.Type = TType.I16;
          tmp442.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await oprot.WriteI16Async(FetchType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxBytes)
        {
          tmp442.Name = "maxBytes";
          tmp442.Type = TType.I64;
          tmp442.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await oprot.WriteI64Async(MaxBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.startRowOffset)
        {
          tmp442.Name = "startRowOffset";
          tmp442.Type = TType.I64;
          tmp442.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await oprot.WriteI64Async(StartRowOffset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.includeResultSetMetadata)
        {
          tmp442.Name = "includeResultSetMetadata";
          tmp442.Type = TType.Bool;
          tmp442.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
          await oprot.WriteBoolAsync(IncludeResultSetMetadata, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TFetchResultsReq other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.operationHandle == other.__isset.operationHandle) && ((!__isset.operationHandle) || (global::System.Object.Equals(OperationHandle, other.OperationHandle))))
        && ((__isset.orientation == other.__isset.orientation) && ((!__isset.orientation) || (global::System.Object.Equals(Orientation, other.Orientation))))
        && ((__isset.maxRows == other.__isset.maxRows) && ((!__isset.maxRows) || (global::System.Object.Equals(MaxRows, other.MaxRows))))
        && ((__isset.fetchType == other.__isset.fetchType) && ((!__isset.fetchType) || (global::System.Object.Equals(FetchType, other.FetchType))))
        && ((__isset.maxBytes == other.__isset.maxBytes) && ((!__isset.maxBytes) || (global::System.Object.Equals(MaxBytes, other.MaxBytes))))
        && ((__isset.startRowOffset == other.__isset.startRowOffset) && ((!__isset.startRowOffset) || (global::System.Object.Equals(StartRowOffset, other.StartRowOffset))))
        && ((__isset.includeResultSetMetadata == other.__isset.includeResultSetMetadata) && ((!__isset.includeResultSetMetadata) || (global::System.Object.Equals(IncludeResultSetMetadata, other.IncludeResultSetMetadata))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((OperationHandle != null) && __isset.operationHandle)
        {
          hashcode = (hashcode * 397) + OperationHandle.GetHashCode();
        }
        if(__isset.orientation)
        {
          hashcode = (hashcode * 397) + Orientation.GetHashCode();
        }
        if(__isset.maxRows)
        {
          hashcode = (hashcode * 397) + MaxRows.GetHashCode();
        }
        if(__isset.fetchType)
        {
          hashcode = (hashcode * 397) + FetchType.GetHashCode();
        }
        if(__isset.maxBytes)
        {
          hashcode = (hashcode * 397) + MaxBytes.GetHashCode();
        }
        if(__isset.startRowOffset)
        {
          hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        }
        if(__isset.includeResultSetMetadata)
        {
          hashcode = (hashcode * 397) + IncludeResultSetMetadata.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp443 = new StringBuilder("TFetchResultsReq(");
      int tmp444 = 0;
      if((OperationHandle != null) && __isset.operationHandle)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("OperationHandle: ");
        OperationHandle.ToString(tmp443);
      }
      if(__isset.orientation)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("Orientation: ");
        Orientation.ToString(tmp443);
      }
      if(__isset.maxRows)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("MaxRows: ");
        MaxRows.ToString(tmp443);
      }
      if(__isset.fetchType)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("FetchType: ");
        FetchType.ToString(tmp443);
      }
      if(__isset.maxBytes)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("MaxBytes: ");
        MaxBytes.ToString(tmp443);
      }
      if(__isset.startRowOffset)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("StartRowOffset: ");
        StartRowOffset.ToString(tmp443);
      }
      if(__isset.includeResultSetMetadata)
      {
        if(0 < tmp444++) { tmp443.Append(", "); }
        tmp443.Append("IncludeResultSetMetadata: ");
        IncludeResultSetMetadata.ToString(tmp443);
      }
      tmp443.Append(')');
      return tmp443.ToString();
    }
  }

}
