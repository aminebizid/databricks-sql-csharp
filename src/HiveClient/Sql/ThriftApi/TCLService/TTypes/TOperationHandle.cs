/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TOperationHandle : TBase
  {
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? _operationId;
    private int _operationType;
    private bool _hasResultSet;
    private double _modifiedRowCount;

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? OperationId
    {
      get
      {
        return _operationId;
      }
      set
      {
        __isset.operationId = true;
        this._operationId = value;
      }
    }

    public int OperationType
    {
      get
      {
        return _operationType;
      }
      set
      {
        __isset.operationType = true;
        this._operationType = value;
      }
    }

    public bool HasResultSet
    {
      get
      {
        return _hasResultSet;
      }
      set
      {
        __isset.hasResultSet = true;
        this._hasResultSet = value;
      }
    }

    public double ModifiedRowCount
    {
      get
      {
        return _modifiedRowCount;
      }
      set
      {
        __isset.modifiedRowCount = true;
        this._modifiedRowCount = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool operationId;
      public bool operationType;
      public bool hasResultSet;
      public bool modifiedRowCount;
    }

    public TOperationHandle()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                OperationId = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier();
                await OperationId.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                OperationType = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                HasResultSet = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                ModifiedRowCount = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp253 = new TStruct("TOperationHandle");
        await oprot.WriteStructBeginAsync(tmp253, cancellationToken);
        var tmp254 = new TField();
        if((OperationId != null) && __isset.operationId)
        {
          tmp254.Name = "operationId";
          tmp254.Type = TType.Struct;
          tmp254.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
          await OperationId.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.operationType)
        {
          tmp254.Name = "operationType";
          tmp254.Type = TType.I32;
          tmp254.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
          await oprot.WriteI32Async(OperationType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hasResultSet)
        {
          tmp254.Name = "hasResultSet";
          tmp254.Type = TType.Bool;
          tmp254.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
          await oprot.WriteBoolAsync(HasResultSet, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.modifiedRowCount)
        {
          tmp254.Name = "modifiedRowCount";
          tmp254.Type = TType.Double;
          tmp254.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
          await oprot.WriteDoubleAsync(ModifiedRowCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TOperationHandle other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.operationId == other.__isset.operationId) && ((!__isset.operationId) || (global::System.Object.Equals(OperationId, other.OperationId))))
        && ((__isset.operationType == other.__isset.operationType) && ((!__isset.operationType) || (global::System.Object.Equals(OperationType, other.OperationType))))
        && ((__isset.hasResultSet == other.__isset.hasResultSet) && ((!__isset.hasResultSet) || (global::System.Object.Equals(HasResultSet, other.HasResultSet))))
        && ((__isset.modifiedRowCount == other.__isset.modifiedRowCount) && ((!__isset.modifiedRowCount) || (global::System.Object.Equals(ModifiedRowCount, other.ModifiedRowCount))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((OperationId != null) && __isset.operationId)
        {
          hashcode = (hashcode * 397) + OperationId.GetHashCode();
        }
        if(__isset.operationType)
        {
          hashcode = (hashcode * 397) + OperationType.GetHashCode();
        }
        if(__isset.hasResultSet)
        {
          hashcode = (hashcode * 397) + HasResultSet.GetHashCode();
        }
        if(__isset.modifiedRowCount)
        {
          hashcode = (hashcode * 397) + ModifiedRowCount.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp255 = new StringBuilder("TOperationHandle(");
      int tmp256 = 0;
      if((OperationId != null) && __isset.operationId)
      {
        if(0 < tmp256++) { tmp255.Append(", "); }
        tmp255.Append("OperationId: ");
        OperationId.ToString(tmp255);
      }
      if(__isset.operationType)
      {
        if(0 < tmp256++) { tmp255.Append(", "); }
        tmp255.Append("OperationType: ");
        OperationType.ToString(tmp255);
      }
      if(__isset.hasResultSet)
      {
        if(0 < tmp256++) { tmp255.Append(", "); }
        tmp255.Append("HasResultSet: ");
        HasResultSet.ToString(tmp255);
      }
      if(__isset.modifiedRowCount)
      {
        if(0 < tmp256++) { tmp255.Append(", "); }
        tmp255.Append("ModifiedRowCount: ");
        ModifiedRowCount.ToString(tmp255);
      }
      tmp255.Append(')');
      return tmp255.ToString();
    }
  }

}
