/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TRowSet : TBase
  {
    private long _startRowOffset;
    private List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRow>? _rows;
    private List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumn>? _columns;
    private byte[]? _binaryColumns;
    private int _columnCount;
    private List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowBatch>? _arrowBatches;
    private List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowResultLink>? _resultLinks;

    public long StartRowOffset
    {
      get
      {
        return _startRowOffset;
      }
      set
      {
        __isset.startRowOffset = true;
        this._startRowOffset = value;
      }
    }

    public List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRow>? Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    public List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumn>? Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public byte[]? BinaryColumns
    {
      get
      {
        return _binaryColumns;
      }
      set
      {
        __isset.binaryColumns = true;
        this._binaryColumns = value;
      }
    }

    public int ColumnCount
    {
      get
      {
        return _columnCount;
      }
      set
      {
        __isset.columnCount = true;
        this._columnCount = value;
      }
    }

    public List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowBatch>? ArrowBatches
    {
      get
      {
        return _arrowBatches;
      }
      set
      {
        __isset.arrowBatches = true;
        this._arrowBatches = value;
      }
    }

    public List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowResultLink>? ResultLinks
    {
      get
      {
        return _resultLinks;
      }
      set
      {
        __isset.resultLinks = true;
        this._resultLinks = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool startRowOffset;
      public bool rows;
      public bool columns;
      public bool binaryColumns;
      public bool columnCount;
      public bool arrowBatches;
      public bool resultLinks;
    }

    public TRowSet()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list187 = await iprot.ReadListBeginAsync(cancellationToken);
                  Rows = new List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRow>(_list187.Count);
                  for(int _i188 = 0; _i188 < _list187.Count; ++_i188)
                  {
                    global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRow _elem189;
                    _elem189 = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRow();
                    await _elem189.ReadAsync(iprot, cancellationToken);
                    Rows.Add(_elem189);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list190 = await iprot.ReadListBeginAsync(cancellationToken);
                  Columns = new List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumn>(_list190.Count);
                  for(int _i191 = 0; _i191 < _list190.Count; ++_i191)
                  {
                    global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumn _elem192;
                    _elem192 = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumn();
                    await _elem192.ReadAsync(iprot, cancellationToken);
                    Columns.Add(_elem192);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                BinaryColumns = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                ColumnCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.List)
              {
                {
                  var _list193 = await iprot.ReadListBeginAsync(cancellationToken);
                  ArrowBatches = new List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowBatch>(_list193.Count);
                  for(int _i194 = 0; _i194 < _list193.Count; ++_i194)
                  {
                    global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowBatch _elem195;
                    _elem195 = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowBatch();
                    await _elem195.ReadAsync(iprot, cancellationToken);
                    ArrowBatches.Add(_elem195);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.List)
              {
                {
                  var _list196 = await iprot.ReadListBeginAsync(cancellationToken);
                  ResultLinks = new List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowResultLink>(_list196.Count);
                  for(int _i197 = 0; _i197 < _list196.Count; ++_i197)
                  {
                    global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowResultLink _elem198;
                    _elem198 = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowResultLink();
                    await _elem198.ReadAsync(iprot, cancellationToken);
                    ResultLinks.Add(_elem198);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp199 = new TStruct("TRowSet");
        await oprot.WriteStructBeginAsync(tmp199, cancellationToken);
        var tmp200 = new TField();
        if(__isset.startRowOffset)
        {
          tmp200.Name = "startRowOffset";
          tmp200.Type = TType.I64;
          tmp200.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteI64Async(StartRowOffset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Rows != null) && __isset.rows)
        {
          tmp200.Name = "rows";
          tmp200.Type = TType.List;
          tmp200.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Rows.Count), cancellationToken);
          foreach (global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TRow _iter201 in Rows)
          {
            await _iter201.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Columns != null) && __isset.columns)
        {
          tmp200.Name = "columns";
          tmp200.Type = TType.List;
          tmp200.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
          foreach (global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumn _iter202 in Columns)
          {
            await _iter202.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BinaryColumns != null) && __isset.binaryColumns)
        {
          tmp200.Name = "binaryColumns";
          tmp200.Type = TType.String;
          tmp200.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteBinaryAsync(BinaryColumns, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.columnCount)
        {
          tmp200.Name = "columnCount";
          tmp200.Type = TType.I32;
          tmp200.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteI32Async(ColumnCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ArrowBatches != null) && __isset.arrowBatches)
        {
          tmp200.Name = "arrowBatches";
          tmp200.Type = TType.List;
          tmp200.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ArrowBatches.Count), cancellationToken);
          foreach (global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowBatch _iter203 in ArrowBatches)
          {
            await _iter203.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ResultLinks != null) && __isset.resultLinks)
        {
          tmp200.Name = "resultLinks";
          tmp200.Type = TType.List;
          tmp200.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ResultLinks.Count), cancellationToken);
          foreach (global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkArrowResultLink _iter204 in ResultLinks)
          {
            await _iter204.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TRowSet other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.startRowOffset == other.__isset.startRowOffset) && ((!__isset.startRowOffset) || (global::System.Object.Equals(StartRowOffset, other.StartRowOffset))))
        && ((__isset.rows == other.__isset.rows) && ((!__isset.rows) || (TCollections.Equals(Rows, other.Rows))))
        && ((__isset.columns == other.__isset.columns) && ((!__isset.columns) || (TCollections.Equals(Columns, other.Columns))))
        && ((__isset.binaryColumns == other.__isset.binaryColumns) && ((!__isset.binaryColumns) || (TCollections.Equals(BinaryColumns, other.BinaryColumns))))
        && ((__isset.columnCount == other.__isset.columnCount) && ((!__isset.columnCount) || (global::System.Object.Equals(ColumnCount, other.ColumnCount))))
        && ((__isset.arrowBatches == other.__isset.arrowBatches) && ((!__isset.arrowBatches) || (TCollections.Equals(ArrowBatches, other.ArrowBatches))))
        && ((__isset.resultLinks == other.__isset.resultLinks) && ((!__isset.resultLinks) || (TCollections.Equals(ResultLinks, other.ResultLinks))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.startRowOffset)
        {
          hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        }
        if((Rows != null) && __isset.rows)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
        }
        if((Columns != null) && __isset.columns)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns);
        }
        if((BinaryColumns != null) && __isset.binaryColumns)
        {
          hashcode = (hashcode * 397) + BinaryColumns.GetHashCode();
        }
        if(__isset.columnCount)
        {
          hashcode = (hashcode * 397) + ColumnCount.GetHashCode();
        }
        if((ArrowBatches != null) && __isset.arrowBatches)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ArrowBatches);
        }
        if((ResultLinks != null) && __isset.resultLinks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ResultLinks);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp205 = new StringBuilder("TRowSet(");
      int tmp206 = 0;
      if(__isset.startRowOffset)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("StartRowOffset: ");
        StartRowOffset.ToString(tmp205);
      }
      if((Rows != null) && __isset.rows)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("Rows: ");
        Rows.ToString(tmp205);
      }
      if((Columns != null) && __isset.columns)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("Columns: ");
        Columns.ToString(tmp205);
      }
      if((BinaryColumns != null) && __isset.binaryColumns)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("BinaryColumns: ");
        BinaryColumns.ToString(tmp205);
      }
      if(__isset.columnCount)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("ColumnCount: ");
        ColumnCount.ToString(tmp205);
      }
      if((ArrowBatches != null) && __isset.arrowBatches)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("ArrowBatches: ");
        ArrowBatches.ToString(tmp205);
      }
      if((ResultLinks != null) && __isset.resultLinks)
      {
        if(0 < tmp206++) { tmp205.Append(", "); }
        tmp205.Append("ResultLinks: ");
        ResultLinks.ToString(tmp205);
      }
      tmp205.Append(')');
      return tmp205.ToString();
    }
  }

}
