/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TDBSqlSessionConf : TBase
  {
    private Dictionary<string, string>? _confs;
    private List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlTempView>? _tempViews;
    private string? _currentDatabase;
    private string? _currentCatalog;
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionCapabilities? _sessionCapabilities;

    public Dictionary<string, string>? Confs
    {
      get
      {
        return _confs;
      }
      set
      {
        __isset.confs = true;
        this._confs = value;
      }
    }

    public List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlTempView>? TempViews
    {
      get
      {
        return _tempViews;
      }
      set
      {
        __isset.tempViews = true;
        this._tempViews = value;
      }
    }

    public string? CurrentDatabase
    {
      get
      {
        return _currentDatabase;
      }
      set
      {
        __isset.currentDatabase = true;
        this._currentDatabase = value;
      }
    }

    public string? CurrentCatalog
    {
      get
      {
        return _currentCatalog;
      }
      set
      {
        __isset.currentCatalog = true;
        this._currentCatalog = value;
      }
    }

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionCapabilities? SessionCapabilities
    {
      get
      {
        return _sessionCapabilities;
      }
      set
      {
        __isset.sessionCapabilities = true;
        this._sessionCapabilities = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool confs;
      public bool tempViews;
      public bool currentDatabase;
      public bool currentCatalog;
      public bool sessionCapabilities;
    }

    public TDBSqlSessionConf()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  var _map220 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Confs = new Dictionary<string, string>(_map220.Count);
                  for(int _i221 = 0; _i221 < _map220.Count; ++_i221)
                  {
                    string _key222;
                    string _val223;
                    _key222 = await iprot.ReadStringAsync(cancellationToken);
                    _val223 = await iprot.ReadStringAsync(cancellationToken);
                    Confs[_key222] = _val223;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list224 = await iprot.ReadListBeginAsync(cancellationToken);
                  TempViews = new List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlTempView>(_list224.Count);
                  for(int _i225 = 0; _i225 < _list224.Count; ++_i225)
                  {
                    global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlTempView _elem226;
                    _elem226 = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlTempView();
                    await _elem226.ReadAsync(iprot, cancellationToken);
                    TempViews.Add(_elem226);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                CurrentDatabase = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                CurrentCatalog = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                SessionCapabilities = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionCapabilities();
                await SessionCapabilities.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp227 = new TStruct("TDBSqlSessionConf");
        await oprot.WriteStructBeginAsync(tmp227, cancellationToken);
        var tmp228 = new TField();
        if((Confs != null) && __isset.confs)
        {
          tmp228.Name = "confs";
          tmp228.Type = TType.Map;
          tmp228.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Confs.Count), cancellationToken);
          foreach (string _iter229 in Confs.Keys)
          {
            await oprot.WriteStringAsync(_iter229, cancellationToken);
            await oprot.WriteStringAsync(Confs[_iter229], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TempViews != null) && __isset.tempViews)
        {
          tmp228.Name = "tempViews";
          tmp228.Type = TType.List;
          tmp228.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, TempViews.Count), cancellationToken);
          foreach (global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlTempView _iter230 in TempViews)
          {
            await _iter230.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CurrentDatabase != null) && __isset.currentDatabase)
        {
          tmp228.Name = "currentDatabase";
          tmp228.Type = TType.String;
          tmp228.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
          await oprot.WriteStringAsync(CurrentDatabase, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CurrentCatalog != null) && __isset.currentCatalog)
        {
          tmp228.Name = "currentCatalog";
          tmp228.Type = TType.String;
          tmp228.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
          await oprot.WriteStringAsync(CurrentCatalog, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SessionCapabilities != null) && __isset.sessionCapabilities)
        {
          tmp228.Name = "sessionCapabilities";
          tmp228.Type = TType.Struct;
          tmp228.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
          await SessionCapabilities.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TDBSqlSessionConf other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.confs == other.__isset.confs) && ((!__isset.confs) || (TCollections.Equals(Confs, other.Confs))))
        && ((__isset.tempViews == other.__isset.tempViews) && ((!__isset.tempViews) || (TCollections.Equals(TempViews, other.TempViews))))
        && ((__isset.currentDatabase == other.__isset.currentDatabase) && ((!__isset.currentDatabase) || (global::System.Object.Equals(CurrentDatabase, other.CurrentDatabase))))
        && ((__isset.currentCatalog == other.__isset.currentCatalog) && ((!__isset.currentCatalog) || (global::System.Object.Equals(CurrentCatalog, other.CurrentCatalog))))
        && ((__isset.sessionCapabilities == other.__isset.sessionCapabilities) && ((!__isset.sessionCapabilities) || (global::System.Object.Equals(SessionCapabilities, other.SessionCapabilities))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Confs != null) && __isset.confs)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Confs);
        }
        if((TempViews != null) && __isset.tempViews)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(TempViews);
        }
        if((CurrentDatabase != null) && __isset.currentDatabase)
        {
          hashcode = (hashcode * 397) + CurrentDatabase.GetHashCode();
        }
        if((CurrentCatalog != null) && __isset.currentCatalog)
        {
          hashcode = (hashcode * 397) + CurrentCatalog.GetHashCode();
        }
        if((SessionCapabilities != null) && __isset.sessionCapabilities)
        {
          hashcode = (hashcode * 397) + SessionCapabilities.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp231 = new StringBuilder("TDBSqlSessionConf(");
      int tmp232 = 0;
      if((Confs != null) && __isset.confs)
      {
        if(0 < tmp232++) { tmp231.Append(", "); }
        tmp231.Append("Confs: ");
        Confs.ToString(tmp231);
      }
      if((TempViews != null) && __isset.tempViews)
      {
        if(0 < tmp232++) { tmp231.Append(", "); }
        tmp231.Append("TempViews: ");
        TempViews.ToString(tmp231);
      }
      if((CurrentDatabase != null) && __isset.currentDatabase)
      {
        if(0 < tmp232++) { tmp231.Append(", "); }
        tmp231.Append("CurrentDatabase: ");
        CurrentDatabase.ToString(tmp231);
      }
      if((CurrentCatalog != null) && __isset.currentCatalog)
      {
        if(0 < tmp232++) { tmp231.Append(", "); }
        tmp231.Append("CurrentCatalog: ");
        CurrentCatalog.ToString(tmp231);
      }
      if((SessionCapabilities != null) && __isset.sessionCapabilities)
      {
        if(0 < tmp232++) { tmp231.Append(", "); }
        tmp231.Append("SessionCapabilities: ");
        SessionCapabilities.ToString(tmp231);
      }
      tmp231.Append(')');
      return tmp231.ToString();
    }
  }

}
