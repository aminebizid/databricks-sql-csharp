/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TGetCrossReferenceReq : TBase
  {
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSessionHandle? _sessionHandle;
    private string? _parentCatalogName;
    private string? _parentSchemaName;
    private string? _parentTableName;
    private string? _foreignCatalogName;
    private string? _foreignSchemaName;
    private string? _foreignTableName;
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkGetDirectResults? _getDirectResults;
    private bool _runAsync;
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? _operationId;
    private global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionConf? _sessionConf;

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSessionHandle? SessionHandle
    {
      get
      {
        return _sessionHandle;
      }
      set
      {
        __isset.sessionHandle = true;
        this._sessionHandle = value;
      }
    }

    public string? ParentCatalogName
    {
      get
      {
        return _parentCatalogName;
      }
      set
      {
        __isset.parentCatalogName = true;
        this._parentCatalogName = value;
      }
    }

    public string? ParentSchemaName
    {
      get
      {
        return _parentSchemaName;
      }
      set
      {
        __isset.parentSchemaName = true;
        this._parentSchemaName = value;
      }
    }

    public string? ParentTableName
    {
      get
      {
        return _parentTableName;
      }
      set
      {
        __isset.parentTableName = true;
        this._parentTableName = value;
      }
    }

    public string? ForeignCatalogName
    {
      get
      {
        return _foreignCatalogName;
      }
      set
      {
        __isset.foreignCatalogName = true;
        this._foreignCatalogName = value;
      }
    }

    public string? ForeignSchemaName
    {
      get
      {
        return _foreignSchemaName;
      }
      set
      {
        __isset.foreignSchemaName = true;
        this._foreignSchemaName = value;
      }
    }

    public string? ForeignTableName
    {
      get
      {
        return _foreignTableName;
      }
      set
      {
        __isset.foreignTableName = true;
        this._foreignTableName = value;
      }
    }

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkGetDirectResults? GetDirectResults
    {
      get
      {
        return _getDirectResults;
      }
      set
      {
        __isset.getDirectResults = true;
        this._getDirectResults = value;
      }
    }

    public bool RunAsync
    {
      get
      {
        return _runAsync;
      }
      set
      {
        __isset.runAsync = true;
        this._runAsync = value;
      }
    }

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? OperationId
    {
      get
      {
        return _operationId;
      }
      set
      {
        __isset.operationId = true;
        this._operationId = value;
      }
    }

    public global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionConf? SessionConf
    {
      get
      {
        return _sessionConf;
      }
      set
      {
        __isset.sessionConf = true;
        this._sessionConf = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sessionHandle;
      public bool parentCatalogName;
      public bool parentSchemaName;
      public bool parentTableName;
      public bool foreignCatalogName;
      public bool foreignSchemaName;
      public bool foreignTableName;
      public bool getDirectResults;
      public bool runAsync;
      public bool operationId;
      public bool sessionConf;
    }

    public TGetCrossReferenceReq()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ParentCatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ParentSchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ParentTableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ForeignCatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                ForeignSchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                ForeignTableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.Struct)
              {
                GetDirectResults = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TSparkGetDirectResults();
                await GetDirectResults.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.Bool)
              {
                RunAsync = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.Struct)
              {
                OperationId = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier();
                await OperationId.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3330:
              if (field.Type == TType.Struct)
              {
                SessionConf = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionConf();
                await SessionConf.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp401 = new TStruct("TGetCrossReferenceReq");
        await oprot.WriteStructBeginAsync(tmp401, cancellationToken);
        var tmp402 = new TField();
        if((SessionHandle != null) && __isset.sessionHandle)
        {
          tmp402.Name = "sessionHandle";
          tmp402.Type = TType.Struct;
          tmp402.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentCatalogName != null) && __isset.parentCatalogName)
        {
          tmp402.Name = "parentCatalogName";
          tmp402.Type = TType.String;
          tmp402.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteStringAsync(ParentCatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentSchemaName != null) && __isset.parentSchemaName)
        {
          tmp402.Name = "parentSchemaName";
          tmp402.Type = TType.String;
          tmp402.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteStringAsync(ParentSchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentTableName != null) && __isset.parentTableName)
        {
          tmp402.Name = "parentTableName";
          tmp402.Type = TType.String;
          tmp402.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteStringAsync(ParentTableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ForeignCatalogName != null) && __isset.foreignCatalogName)
        {
          tmp402.Name = "foreignCatalogName";
          tmp402.Type = TType.String;
          tmp402.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteStringAsync(ForeignCatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ForeignSchemaName != null) && __isset.foreignSchemaName)
        {
          tmp402.Name = "foreignSchemaName";
          tmp402.Type = TType.String;
          tmp402.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteStringAsync(ForeignSchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ForeignTableName != null) && __isset.foreignTableName)
        {
          tmp402.Name = "foreignTableName";
          tmp402.Type = TType.String;
          tmp402.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteStringAsync(ForeignTableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          tmp402.Name = "getDirectResults";
          tmp402.Type = TType.Struct;
          tmp402.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await GetDirectResults.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.runAsync)
        {
          tmp402.Name = "runAsync";
          tmp402.Type = TType.Bool;
          tmp402.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await oprot.WriteBoolAsync(RunAsync, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((OperationId != null) && __isset.operationId)
        {
          tmp402.Name = "operationId";
          tmp402.Type = TType.Struct;
          tmp402.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await OperationId.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SessionConf != null) && __isset.sessionConf)
        {
          tmp402.Name = "sessionConf";
          tmp402.Type = TType.Struct;
          tmp402.ID = 3330;
          await oprot.WriteFieldBeginAsync(tmp402, cancellationToken);
          await SessionConf.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TGetCrossReferenceReq other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.sessionHandle == other.__isset.sessionHandle) && ((!__isset.sessionHandle) || (global::System.Object.Equals(SessionHandle, other.SessionHandle))))
        && ((__isset.parentCatalogName == other.__isset.parentCatalogName) && ((!__isset.parentCatalogName) || (global::System.Object.Equals(ParentCatalogName, other.ParentCatalogName))))
        && ((__isset.parentSchemaName == other.__isset.parentSchemaName) && ((!__isset.parentSchemaName) || (global::System.Object.Equals(ParentSchemaName, other.ParentSchemaName))))
        && ((__isset.parentTableName == other.__isset.parentTableName) && ((!__isset.parentTableName) || (global::System.Object.Equals(ParentTableName, other.ParentTableName))))
        && ((__isset.foreignCatalogName == other.__isset.foreignCatalogName) && ((!__isset.foreignCatalogName) || (global::System.Object.Equals(ForeignCatalogName, other.ForeignCatalogName))))
        && ((__isset.foreignSchemaName == other.__isset.foreignSchemaName) && ((!__isset.foreignSchemaName) || (global::System.Object.Equals(ForeignSchemaName, other.ForeignSchemaName))))
        && ((__isset.foreignTableName == other.__isset.foreignTableName) && ((!__isset.foreignTableName) || (global::System.Object.Equals(ForeignTableName, other.ForeignTableName))))
        && ((__isset.getDirectResults == other.__isset.getDirectResults) && ((!__isset.getDirectResults) || (global::System.Object.Equals(GetDirectResults, other.GetDirectResults))))
        && ((__isset.runAsync == other.__isset.runAsync) && ((!__isset.runAsync) || (global::System.Object.Equals(RunAsync, other.RunAsync))))
        && ((__isset.operationId == other.__isset.operationId) && ((!__isset.operationId) || (global::System.Object.Equals(OperationId, other.OperationId))))
        && ((__isset.sessionConf == other.__isset.sessionConf) && ((!__isset.sessionConf) || (global::System.Object.Equals(SessionConf, other.SessionConf))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((SessionHandle != null) && __isset.sessionHandle)
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if((ParentCatalogName != null) && __isset.parentCatalogName)
        {
          hashcode = (hashcode * 397) + ParentCatalogName.GetHashCode();
        }
        if((ParentSchemaName != null) && __isset.parentSchemaName)
        {
          hashcode = (hashcode * 397) + ParentSchemaName.GetHashCode();
        }
        if((ParentTableName != null) && __isset.parentTableName)
        {
          hashcode = (hashcode * 397) + ParentTableName.GetHashCode();
        }
        if((ForeignCatalogName != null) && __isset.foreignCatalogName)
        {
          hashcode = (hashcode * 397) + ForeignCatalogName.GetHashCode();
        }
        if((ForeignSchemaName != null) && __isset.foreignSchemaName)
        {
          hashcode = (hashcode * 397) + ForeignSchemaName.GetHashCode();
        }
        if((ForeignTableName != null) && __isset.foreignTableName)
        {
          hashcode = (hashcode * 397) + ForeignTableName.GetHashCode();
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          hashcode = (hashcode * 397) + GetDirectResults.GetHashCode();
        }
        if(__isset.runAsync)
        {
          hashcode = (hashcode * 397) + RunAsync.GetHashCode();
        }
        if((OperationId != null) && __isset.operationId)
        {
          hashcode = (hashcode * 397) + OperationId.GetHashCode();
        }
        if((SessionConf != null) && __isset.sessionConf)
        {
          hashcode = (hashcode * 397) + SessionConf.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp403 = new StringBuilder("TGetCrossReferenceReq(");
      int tmp404 = 0;
      if((SessionHandle != null) && __isset.sessionHandle)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("SessionHandle: ");
        SessionHandle.ToString(tmp403);
      }
      if((ParentCatalogName != null) && __isset.parentCatalogName)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("ParentCatalogName: ");
        ParentCatalogName.ToString(tmp403);
      }
      if((ParentSchemaName != null) && __isset.parentSchemaName)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("ParentSchemaName: ");
        ParentSchemaName.ToString(tmp403);
      }
      if((ParentTableName != null) && __isset.parentTableName)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("ParentTableName: ");
        ParentTableName.ToString(tmp403);
      }
      if((ForeignCatalogName != null) && __isset.foreignCatalogName)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("ForeignCatalogName: ");
        ForeignCatalogName.ToString(tmp403);
      }
      if((ForeignSchemaName != null) && __isset.foreignSchemaName)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("ForeignSchemaName: ");
        ForeignSchemaName.ToString(tmp403);
      }
      if((ForeignTableName != null) && __isset.foreignTableName)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("ForeignTableName: ");
        ForeignTableName.ToString(tmp403);
      }
      if((GetDirectResults != null) && __isset.getDirectResults)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("GetDirectResults: ");
        GetDirectResults.ToString(tmp403);
      }
      if(__isset.runAsync)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("RunAsync: ");
        RunAsync.ToString(tmp403);
      }
      if((OperationId != null) && __isset.operationId)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("OperationId: ");
        OperationId.ToString(tmp403);
      }
      if((SessionConf != null) && __isset.sessionConf)
      {
        if(0 < tmp404++) { tmp403.Append(", "); }
        tmp403.Append("SessionConf: ");
        SessionConf.ToString(tmp403);
      }
      tmp403.Append(')');
      return tmp403.ToString();
    }
  }

}
