/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TI64Column : TBase
  {
    private List<long>? _values;
    private byte[]? _nulls;

    public List<long>? Values
    {
      get
      {
        return _values;
      }
      set
      {
        __isset.values = true;
        this._values = value;
      }
    }

    public byte[]? Nulls
    {
      get
      {
        return _nulls;
      }
      set
      {
        __isset.nulls = true;
        this._nulls = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool values;
      public bool nulls;
    }

    public TI64Column()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list143 = await iprot.ReadListBeginAsync(cancellationToken);
                  Values = new List<long>(_list143.Count);
                  for(int _i144 = 0; _i144 < _list143.Count; ++_i144)
                  {
                    long _elem145;
                    _elem145 = await iprot.ReadI64Async(cancellationToken);
                    Values.Add(_elem145);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Nulls = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp146 = new TStruct("TI64Column");
        await oprot.WriteStructBeginAsync(tmp146, cancellationToken);
        var tmp147 = new TField();
        if((Values != null) && __isset.values)
        {
          tmp147.Name = "values";
          tmp147.Type = TType.List;
          tmp147.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.I64, Values.Count), cancellationToken);
          foreach (long _iter148 in Values)
          {
            await oprot.WriteI64Async(_iter148, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Nulls != null) && __isset.nulls)
        {
          tmp147.Name = "nulls";
          tmp147.Type = TType.String;
          tmp147.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp147, cancellationToken);
          await oprot.WriteBinaryAsync(Nulls, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TI64Column other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.values == other.__isset.values) && ((!__isset.values) || (TCollections.Equals(Values, other.Values))))
        && ((__isset.nulls == other.__isset.nulls) && ((!__isset.nulls) || (TCollections.Equals(Nulls, other.Nulls))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Values != null) && __isset.values)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
        }
        if((Nulls != null) && __isset.nulls)
        {
          hashcode = (hashcode * 397) + Nulls.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp149 = new StringBuilder("TI64Column(");
      int tmp150 = 0;
      if((Values != null) && __isset.values)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Values: ");
        Values.ToString(tmp149);
      }
      if((Nulls != null) && __isset.nulls)
      {
        if(0 < tmp150++) { tmp149.Append(", "); }
        tmp149.Append("Nulls: ");
        Nulls.ToString(tmp149);
      }
      tmp149.Append(')');
      return tmp149.ToString();
    }
  }

}
