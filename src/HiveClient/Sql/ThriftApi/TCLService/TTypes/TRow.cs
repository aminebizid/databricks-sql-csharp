/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace HiveClient.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TRow : TBase
  {
    private List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumnValue>? _colVals;

    public List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumnValue>? ColVals
    {
      get
      {
        return _colVals;
      }
      set
      {
        __isset.colVals = true;
        this._colVals = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool colVals;
    }

    public TRow()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list103 = await iprot.ReadListBeginAsync(cancellationToken);
                  ColVals = new List<global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumnValue>(_list103.Count);
                  for(int _i104 = 0; _i104 < _list103.Count; ++_i104)
                  {
                    global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumnValue _elem105;
                    _elem105 = new global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumnValue();
                    await _elem105.ReadAsync(iprot, cancellationToken);
                    ColVals.Add(_elem105);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp106 = new TStruct("TRow");
        await oprot.WriteStructBeginAsync(tmp106, cancellationToken);
        var tmp107 = new TField();
        if((ColVals != null) && __isset.colVals)
        {
          tmp107.Name = "colVals";
          tmp107.Type = TType.List;
          tmp107.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp107, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ColVals.Count), cancellationToken);
          foreach (global::HiveClient.Sql.ThriftApi.TCLService.TTypes.TColumnValue _iter108 in ColVals)
          {
            await _iter108.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TRow other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.colVals == other.__isset.colVals) && ((!__isset.colVals) || (TCollections.Equals(ColVals, other.ColVals))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ColVals != null) && __isset.colVals)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ColVals);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp109 = new StringBuilder("TRow(");
      int tmp110 = 0;
      if((ColVals != null) && __isset.colVals)
      {
        if(0 < tmp110++) { tmp109.Append(", "); }
        tmp109.Append("ColVals: ");
        ColVals.ToString(tmp109);
      }
      tmp109.Append(')');
      return tmp109.ToString();
    }
  }

}
