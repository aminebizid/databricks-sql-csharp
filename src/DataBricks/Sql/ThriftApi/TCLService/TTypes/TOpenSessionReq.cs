/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TOpenSessionReq : TBase
  {
    private int _client_protocol;
    private string? _username;
    private string? _password;
    private Dictionary<string, string>? _configuration;
    private List<int>? _getInfos;
    private long _client_protocol_i64;
    private Dictionary<string, string>? _connectionProperties;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TNamespace? _initialNamespace;
    private bool _canUseMultipleCatalogs;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? _sessionId;

    public int Client_protocol
    {
      get
      {
        return _client_protocol;
      }
      set
      {
        __isset.client_protocol = true;
        this._client_protocol = value;
      }
    }

    public string? Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string? Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public Dictionary<string, string>? Configuration
    {
      get
      {
        return _configuration;
      }
      set
      {
        __isset.configuration = true;
        this._configuration = value;
      }
    }

    public List<int>? GetInfos
    {
      get
      {
        return _getInfos;
      }
      set
      {
        __isset.getInfos = true;
        this._getInfos = value;
      }
    }

    public long Client_protocol_i64
    {
      get
      {
        return _client_protocol_i64;
      }
      set
      {
        __isset.client_protocol_i64 = true;
        this._client_protocol_i64 = value;
      }
    }

    public Dictionary<string, string>? ConnectionProperties
    {
      get
      {
        return _connectionProperties;
      }
      set
      {
        __isset.connectionProperties = true;
        this._connectionProperties = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TNamespace? InitialNamespace
    {
      get
      {
        return _initialNamespace;
      }
      set
      {
        __isset.initialNamespace = true;
        this._initialNamespace = value;
      }
    }

    public bool CanUseMultipleCatalogs
    {
      get
      {
        return _canUseMultipleCatalogs;
      }
      set
      {
        __isset.canUseMultipleCatalogs = true;
        this._canUseMultipleCatalogs = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool client_protocol;
      public bool username;
      public bool password;
      public bool configuration;
      public bool getInfos;
      public bool client_protocol_i64;
      public bool connectionProperties;
      public bool initialNamespace;
      public bool canUseMultipleCatalogs;
      public bool sessionId;
    }

    public TOpenSessionReq()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Client_protocol = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Password = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  var _map257 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Configuration = new Dictionary<string, string>(_map257.Count);
                  for(int _i258 = 0; _i258 < _map257.Count; ++_i258)
                  {
                    string _key259;
                    string _val260;
                    _key259 = await iprot.ReadStringAsync(cancellationToken);
                    _val260 = await iprot.ReadStringAsync(cancellationToken);
                    Configuration[_key259] = _val260;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.List)
              {
                {
                  var _list261 = await iprot.ReadListBeginAsync(cancellationToken);
                  GetInfos = new List<int>(_list261.Count);
                  for(int _i262 = 0; _i262 < _list261.Count; ++_i262)
                  {
                    int _elem263;
                    _elem263 = await iprot.ReadI32Async(cancellationToken);
                    GetInfos.Add(_elem263);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.I64)
              {
                Client_protocol_i64 = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.Map)
              {
                {
                  var _map264 = await iprot.ReadMapBeginAsync(cancellationToken);
                  ConnectionProperties = new Dictionary<string, string>(_map264.Count);
                  for(int _i265 = 0; _i265 < _map264.Count; ++_i265)
                  {
                    string _key266;
                    string _val267;
                    _key266 = await iprot.ReadStringAsync(cancellationToken);
                    _val267 = await iprot.ReadStringAsync(cancellationToken);
                    ConnectionProperties[_key266] = _val267;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1284:
              if (field.Type == TType.Struct)
              {
                InitialNamespace = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TNamespace();
                await InitialNamespace.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1285:
              if (field.Type == TType.Bool)
              {
                CanUseMultipleCatalogs = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.Struct)
              {
                SessionId = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier();
                await SessionId.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp268 = new TStruct("TOpenSessionReq");
        await oprot.WriteStructBeginAsync(tmp268, cancellationToken);
        var tmp269 = new TField();
        if(__isset.client_protocol)
        {
          tmp269.Name = "client_protocol";
          tmp269.Type = TType.I32;
          tmp269.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteI32Async(Client_protocol, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Username != null) && __isset.username)
        {
          tmp269.Name = "username";
          tmp269.Type = TType.String;
          tmp269.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Password != null) && __isset.password)
        {
          tmp269.Name = "password";
          tmp269.Type = TType.String;
          tmp269.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteStringAsync(Password, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Configuration != null) && __isset.configuration)
        {
          tmp269.Name = "configuration";
          tmp269.Type = TType.Map;
          tmp269.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
          foreach (string _iter270 in Configuration.Keys)
          {
            await oprot.WriteStringAsync(_iter270, cancellationToken);
            await oprot.WriteStringAsync(Configuration[_iter270], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GetInfos != null) && __isset.getInfos)
        {
          tmp269.Name = "getInfos";
          tmp269.Type = TType.List;
          tmp269.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.I32, GetInfos.Count), cancellationToken);
          foreach (int _iter271 in GetInfos)
          {
            await oprot.WriteI32Async(_iter271, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.client_protocol_i64)
        {
          tmp269.Name = "client_protocol_i64";
          tmp269.Type = TType.I64;
          tmp269.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteI64Async(Client_protocol_i64, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ConnectionProperties != null) && __isset.connectionProperties)
        {
          tmp269.Name = "connectionProperties";
          tmp269.Type = TType.Map;
          tmp269.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConnectionProperties.Count), cancellationToken);
          foreach (string _iter272 in ConnectionProperties.Keys)
          {
            await oprot.WriteStringAsync(_iter272, cancellationToken);
            await oprot.WriteStringAsync(ConnectionProperties[_iter272], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InitialNamespace != null) && __isset.initialNamespace)
        {
          tmp269.Name = "initialNamespace";
          tmp269.Type = TType.Struct;
          tmp269.ID = 1284;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await InitialNamespace.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canUseMultipleCatalogs)
        {
          tmp269.Name = "canUseMultipleCatalogs";
          tmp269.Type = TType.Bool;
          tmp269.ID = 1285;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await oprot.WriteBoolAsync(CanUseMultipleCatalogs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SessionId != null) && __isset.sessionId)
        {
          tmp269.Name = "sessionId";
          tmp269.Type = TType.Struct;
          tmp269.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await SessionId.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TOpenSessionReq other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.client_protocol == other.__isset.client_protocol) && ((!__isset.client_protocol) || (global::System.Object.Equals(Client_protocol, other.Client_protocol))))
        && ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
        && ((__isset.password == other.__isset.password) && ((!__isset.password) || (global::System.Object.Equals(Password, other.Password))))
        && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (TCollections.Equals(Configuration, other.Configuration))))
        && ((__isset.getInfos == other.__isset.getInfos) && ((!__isset.getInfos) || (TCollections.Equals(GetInfos, other.GetInfos))))
        && ((__isset.client_protocol_i64 == other.__isset.client_protocol_i64) && ((!__isset.client_protocol_i64) || (global::System.Object.Equals(Client_protocol_i64, other.Client_protocol_i64))))
        && ((__isset.connectionProperties == other.__isset.connectionProperties) && ((!__isset.connectionProperties) || (TCollections.Equals(ConnectionProperties, other.ConnectionProperties))))
        && ((__isset.initialNamespace == other.__isset.initialNamespace) && ((!__isset.initialNamespace) || (global::System.Object.Equals(InitialNamespace, other.InitialNamespace))))
        && ((__isset.canUseMultipleCatalogs == other.__isset.canUseMultipleCatalogs) && ((!__isset.canUseMultipleCatalogs) || (global::System.Object.Equals(CanUseMultipleCatalogs, other.CanUseMultipleCatalogs))))
        && ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (global::System.Object.Equals(SessionId, other.SessionId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.client_protocol)
        {
          hashcode = (hashcode * 397) + Client_protocol.GetHashCode();
        }
        if((Username != null) && __isset.username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if((Password != null) && __isset.password)
        {
          hashcode = (hashcode * 397) + Password.GetHashCode();
        }
        if((Configuration != null) && __isset.configuration)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
        }
        if((GetInfos != null) && __isset.getInfos)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(GetInfos);
        }
        if(__isset.client_protocol_i64)
        {
          hashcode = (hashcode * 397) + Client_protocol_i64.GetHashCode();
        }
        if((ConnectionProperties != null) && __isset.connectionProperties)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ConnectionProperties);
        }
        if((InitialNamespace != null) && __isset.initialNamespace)
        {
          hashcode = (hashcode * 397) + InitialNamespace.GetHashCode();
        }
        if(__isset.canUseMultipleCatalogs)
        {
          hashcode = (hashcode * 397) + CanUseMultipleCatalogs.GetHashCode();
        }
        if((SessionId != null) && __isset.sessionId)
        {
          hashcode = (hashcode * 397) + SessionId.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp273 = new StringBuilder("TOpenSessionReq(");
      int tmp274 = 0;
      if(__isset.client_protocol)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("Client_protocol: ");
        Client_protocol.ToString(tmp273);
      }
      if((Username != null) && __isset.username)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("Username: ");
        Username.ToString(tmp273);
      }
      if((Password != null) && __isset.password)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("Password: ");
        Password.ToString(tmp273);
      }
      if((Configuration != null) && __isset.configuration)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("Configuration: ");
        Configuration.ToString(tmp273);
      }
      if((GetInfos != null) && __isset.getInfos)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("GetInfos: ");
        GetInfos.ToString(tmp273);
      }
      if(__isset.client_protocol_i64)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("Client_protocol_i64: ");
        Client_protocol_i64.ToString(tmp273);
      }
      if((ConnectionProperties != null) && __isset.connectionProperties)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("ConnectionProperties: ");
        ConnectionProperties.ToString(tmp273);
      }
      if((InitialNamespace != null) && __isset.initialNamespace)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("InitialNamespace: ");
        InitialNamespace.ToString(tmp273);
      }
      if(__isset.canUseMultipleCatalogs)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("CanUseMultipleCatalogs: ");
        CanUseMultipleCatalogs.ToString(tmp273);
      }
      if((SessionId != null) && __isset.sessionId)
      {
        if(0 < tmp274++) { tmp273.Append(", "); }
        tmp273.Append("SessionId: ");
        SessionId.ToString(tmp273);
      }
      tmp273.Append(')');
      return tmp273.ToString();
    }
  }

}
