/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TGetOperationStatusResp : TBase
  {
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TStatus? _status;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TOperationState _operationState;
    private string? _sqlState;
    private int _errorCode;
    private string? _errorMessage;
    private string? _taskStatus;
    private long _operationStarted;
    private long _operationCompleted;
    private bool _hasResultSet;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TProgressUpdateResp? _progressUpdateResponse;
    private long _numModifiedRows;
    private string? _displayMessage;
    private string? _diagnosticInfo;

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TStatus? Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TOperationState"/>
    /// </summary>
    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TOperationState OperationState
    {
      get
      {
        return _operationState;
      }
      set
      {
        __isset.operationState = true;
        this._operationState = value;
      }
    }

    public string? SqlState
    {
      get
      {
        return _sqlState;
      }
      set
      {
        __isset.sqlState = true;
        this._sqlState = value;
      }
    }

    public int ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public string? ErrorMessage
    {
      get
      {
        return _errorMessage;
      }
      set
      {
        __isset.errorMessage = true;
        this._errorMessage = value;
      }
    }

    public string? TaskStatus
    {
      get
      {
        return _taskStatus;
      }
      set
      {
        __isset.taskStatus = true;
        this._taskStatus = value;
      }
    }

    public long OperationStarted
    {
      get
      {
        return _operationStarted;
      }
      set
      {
        __isset.operationStarted = true;
        this._operationStarted = value;
      }
    }

    public long OperationCompleted
    {
      get
      {
        return _operationCompleted;
      }
      set
      {
        __isset.operationCompleted = true;
        this._operationCompleted = value;
      }
    }

    public bool HasResultSet
    {
      get
      {
        return _hasResultSet;
      }
      set
      {
        __isset.hasResultSet = true;
        this._hasResultSet = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TProgressUpdateResp? ProgressUpdateResponse
    {
      get
      {
        return _progressUpdateResponse;
      }
      set
      {
        __isset.progressUpdateResponse = true;
        this._progressUpdateResponse = value;
      }
    }

    public long NumModifiedRows
    {
      get
      {
        return _numModifiedRows;
      }
      set
      {
        __isset.numModifiedRows = true;
        this._numModifiedRows = value;
      }
    }

    public string? DisplayMessage
    {
      get
      {
        return _displayMessage;
      }
      set
      {
        __isset.displayMessage = true;
        this._displayMessage = value;
      }
    }

    public string? DiagnosticInfo
    {
      get
      {
        return _diagnosticInfo;
      }
      set
      {
        __isset.diagnosticInfo = true;
        this._diagnosticInfo = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool status;
      public bool operationState;
      public bool sqlState;
      public bool errorCode;
      public bool errorMessage;
      public bool taskStatus;
      public bool operationStarted;
      public bool operationCompleted;
      public bool hasResultSet;
      public bool progressUpdateResponse;
      public bool numModifiedRows;
      public bool displayMessage;
      public bool diagnosticInfo;
    }

    public TGetOperationStatusResp()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TStatus();
                await Status.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                OperationState = (global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TOperationState)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SqlState = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ErrorCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                TaskStatus = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                OperationStarted = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                OperationCompleted = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                HasResultSet = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                ProgressUpdateResponse = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TProgressUpdateResp();
                await ProgressUpdateResponse.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I64)
              {
                NumModifiedRows = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.String)
              {
                DisplayMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.String)
              {
                DiagnosticInfo = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp413 = new TStruct("TGetOperationStatusResp");
        await oprot.WriteStructBeginAsync(tmp413, cancellationToken);
        var tmp414 = new TField();
        if((Status != null) && __isset.status)
        {
          tmp414.Name = "status";
          tmp414.Type = TType.Struct;
          tmp414.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await Status.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.operationState)
        {
          tmp414.Name = "operationState";
          tmp414.Type = TType.I32;
          tmp414.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteI32Async((int)OperationState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SqlState != null) && __isset.sqlState)
        {
          tmp414.Name = "sqlState";
          tmp414.Type = TType.String;
          tmp414.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteStringAsync(SqlState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.errorCode)
        {
          tmp414.Name = "errorCode";
          tmp414.Type = TType.I32;
          tmp414.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteI32Async(ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          tmp414.Name = "errorMessage";
          tmp414.Type = TType.String;
          tmp414.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TaskStatus != null) && __isset.taskStatus)
        {
          tmp414.Name = "taskStatus";
          tmp414.Type = TType.String;
          tmp414.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteStringAsync(TaskStatus, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.operationStarted)
        {
          tmp414.Name = "operationStarted";
          tmp414.Type = TType.I64;
          tmp414.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteI64Async(OperationStarted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.operationCompleted)
        {
          tmp414.Name = "operationCompleted";
          tmp414.Type = TType.I64;
          tmp414.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteI64Async(OperationCompleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.hasResultSet)
        {
          tmp414.Name = "hasResultSet";
          tmp414.Type = TType.Bool;
          tmp414.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteBoolAsync(HasResultSet, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ProgressUpdateResponse != null) && __isset.progressUpdateResponse)
        {
          tmp414.Name = "progressUpdateResponse";
          tmp414.Type = TType.Struct;
          tmp414.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await ProgressUpdateResponse.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.numModifiedRows)
        {
          tmp414.Name = "numModifiedRows";
          tmp414.Type = TType.I64;
          tmp414.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteI64Async(NumModifiedRows, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DisplayMessage != null) && __isset.displayMessage)
        {
          tmp414.Name = "displayMessage";
          tmp414.Type = TType.String;
          tmp414.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteStringAsync(DisplayMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DiagnosticInfo != null) && __isset.diagnosticInfo)
        {
          tmp414.Name = "diagnosticInfo";
          tmp414.Type = TType.String;
          tmp414.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp414, cancellationToken);
          await oprot.WriteStringAsync(DiagnosticInfo, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TGetOperationStatusResp other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.status == other.__isset.status) && ((!__isset.status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.operationState == other.__isset.operationState) && ((!__isset.operationState) || (global::System.Object.Equals(OperationState, other.OperationState))))
        && ((__isset.sqlState == other.__isset.sqlState) && ((!__isset.sqlState) || (global::System.Object.Equals(SqlState, other.SqlState))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (global::System.Object.Equals(ErrorCode, other.ErrorCode))))
        && ((__isset.errorMessage == other.__isset.errorMessage) && ((!__isset.errorMessage) || (global::System.Object.Equals(ErrorMessage, other.ErrorMessage))))
        && ((__isset.taskStatus == other.__isset.taskStatus) && ((!__isset.taskStatus) || (global::System.Object.Equals(TaskStatus, other.TaskStatus))))
        && ((__isset.operationStarted == other.__isset.operationStarted) && ((!__isset.operationStarted) || (global::System.Object.Equals(OperationStarted, other.OperationStarted))))
        && ((__isset.operationCompleted == other.__isset.operationCompleted) && ((!__isset.operationCompleted) || (global::System.Object.Equals(OperationCompleted, other.OperationCompleted))))
        && ((__isset.hasResultSet == other.__isset.hasResultSet) && ((!__isset.hasResultSet) || (global::System.Object.Equals(HasResultSet, other.HasResultSet))))
        && ((__isset.progressUpdateResponse == other.__isset.progressUpdateResponse) && ((!__isset.progressUpdateResponse) || (global::System.Object.Equals(ProgressUpdateResponse, other.ProgressUpdateResponse))))
        && ((__isset.numModifiedRows == other.__isset.numModifiedRows) && ((!__isset.numModifiedRows) || (global::System.Object.Equals(NumModifiedRows, other.NumModifiedRows))))
        && ((__isset.displayMessage == other.__isset.displayMessage) && ((!__isset.displayMessage) || (global::System.Object.Equals(DisplayMessage, other.DisplayMessage))))
        && ((__isset.diagnosticInfo == other.__isset.diagnosticInfo) && ((!__isset.diagnosticInfo) || (global::System.Object.Equals(DiagnosticInfo, other.DiagnosticInfo))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Status != null) && __isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.operationState)
        {
          hashcode = (hashcode * 397) + OperationState.GetHashCode();
        }
        if((SqlState != null) && __isset.sqlState)
        {
          hashcode = (hashcode * 397) + SqlState.GetHashCode();
        }
        if(__isset.errorCode)
        {
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          hashcode = (hashcode * 397) + ErrorMessage.GetHashCode();
        }
        if((TaskStatus != null) && __isset.taskStatus)
        {
          hashcode = (hashcode * 397) + TaskStatus.GetHashCode();
        }
        if(__isset.operationStarted)
        {
          hashcode = (hashcode * 397) + OperationStarted.GetHashCode();
        }
        if(__isset.operationCompleted)
        {
          hashcode = (hashcode * 397) + OperationCompleted.GetHashCode();
        }
        if(__isset.hasResultSet)
        {
          hashcode = (hashcode * 397) + HasResultSet.GetHashCode();
        }
        if((ProgressUpdateResponse != null) && __isset.progressUpdateResponse)
        {
          hashcode = (hashcode * 397) + ProgressUpdateResponse.GetHashCode();
        }
        if(__isset.numModifiedRows)
        {
          hashcode = (hashcode * 397) + NumModifiedRows.GetHashCode();
        }
        if((DisplayMessage != null) && __isset.displayMessage)
        {
          hashcode = (hashcode * 397) + DisplayMessage.GetHashCode();
        }
        if((DiagnosticInfo != null) && __isset.diagnosticInfo)
        {
          hashcode = (hashcode * 397) + DiagnosticInfo.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp415 = new StringBuilder("TGetOperationStatusResp(");
      int tmp416 = 0;
      if((Status != null) && __isset.status)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("Status: ");
        Status.ToString(tmp415);
      }
      if(__isset.operationState)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("OperationState: ");
        OperationState.ToString(tmp415);
      }
      if((SqlState != null) && __isset.sqlState)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("SqlState: ");
        SqlState.ToString(tmp415);
      }
      if(__isset.errorCode)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("ErrorCode: ");
        ErrorCode.ToString(tmp415);
      }
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("ErrorMessage: ");
        ErrorMessage.ToString(tmp415);
      }
      if((TaskStatus != null) && __isset.taskStatus)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("TaskStatus: ");
        TaskStatus.ToString(tmp415);
      }
      if(__isset.operationStarted)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("OperationStarted: ");
        OperationStarted.ToString(tmp415);
      }
      if(__isset.operationCompleted)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("OperationCompleted: ");
        OperationCompleted.ToString(tmp415);
      }
      if(__isset.hasResultSet)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("HasResultSet: ");
        HasResultSet.ToString(tmp415);
      }
      if((ProgressUpdateResponse != null) && __isset.progressUpdateResponse)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("ProgressUpdateResponse: ");
        ProgressUpdateResponse.ToString(tmp415);
      }
      if(__isset.numModifiedRows)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("NumModifiedRows: ");
        NumModifiedRows.ToString(tmp415);
      }
      if((DisplayMessage != null) && __isset.displayMessage)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("DisplayMessage: ");
        DisplayMessage.ToString(tmp415);
      }
      if((DiagnosticInfo != null) && __isset.diagnosticInfo)
      {
        if(0 < tmp416++) { tmp415.Append(", "); }
        tmp415.Append("DiagnosticInfo: ");
        DiagnosticInfo.ToString(tmp415);
      }
      tmp415.Append(')');
      return tmp415.ToString();
    }
  }

}
