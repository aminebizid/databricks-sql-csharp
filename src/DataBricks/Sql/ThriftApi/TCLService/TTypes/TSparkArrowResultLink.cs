/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TSparkArrowResultLink : TBase
  {
    private string? _fileLink;
    private long _expiryTime;
    private long _startRowOffset;
    private long _rowCount;
    private long _bytesNum;

    public string? FileLink
    {
      get
      {
        return _fileLink;
      }
      set
      {
        __isset.fileLink = true;
        this._fileLink = value;
      }
    }

    public long ExpiryTime
    {
      get
      {
        return _expiryTime;
      }
      set
      {
        __isset.expiryTime = true;
        this._expiryTime = value;
      }
    }

    public long StartRowOffset
    {
      get
      {
        return _startRowOffset;
      }
      set
      {
        __isset.startRowOffset = true;
        this._startRowOffset = value;
      }
    }

    public long RowCount
    {
      get
      {
        return _rowCount;
      }
      set
      {
        __isset.rowCount = true;
        this._rowCount = value;
      }
    }

    public long BytesNum
    {
      get
      {
        return _bytesNum;
      }
      set
      {
        __isset.bytesNum = true;
        this._bytesNum = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fileLink;
      public bool expiryTime;
      public bool startRowOffset;
      public bool rowCount;
      public bool bytesNum;
    }

    public TSparkArrowResultLink()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileLink = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                ExpiryTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                RowCount = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                BytesNum = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp183 = new TStruct("TSparkArrowResultLink");
        await oprot.WriteStructBeginAsync(tmp183, cancellationToken);
        var tmp184 = new TField();
        if((FileLink != null) && __isset.fileLink)
        {
          tmp184.Name = "fileLink";
          tmp184.Type = TType.String;
          tmp184.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await oprot.WriteStringAsync(FileLink, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.expiryTime)
        {
          tmp184.Name = "expiryTime";
          tmp184.Type = TType.I64;
          tmp184.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await oprot.WriteI64Async(ExpiryTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.startRowOffset)
        {
          tmp184.Name = "startRowOffset";
          tmp184.Type = TType.I64;
          tmp184.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await oprot.WriteI64Async(StartRowOffset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.rowCount)
        {
          tmp184.Name = "rowCount";
          tmp184.Type = TType.I64;
          tmp184.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await oprot.WriteI64Async(RowCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.bytesNum)
        {
          tmp184.Name = "bytesNum";
          tmp184.Type = TType.I64;
          tmp184.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
          await oprot.WriteI64Async(BytesNum, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TSparkArrowResultLink other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fileLink == other.__isset.fileLink) && ((!__isset.fileLink) || (global::System.Object.Equals(FileLink, other.FileLink))))
        && ((__isset.expiryTime == other.__isset.expiryTime) && ((!__isset.expiryTime) || (global::System.Object.Equals(ExpiryTime, other.ExpiryTime))))
        && ((__isset.startRowOffset == other.__isset.startRowOffset) && ((!__isset.startRowOffset) || (global::System.Object.Equals(StartRowOffset, other.StartRowOffset))))
        && ((__isset.rowCount == other.__isset.rowCount) && ((!__isset.rowCount) || (global::System.Object.Equals(RowCount, other.RowCount))))
        && ((__isset.bytesNum == other.__isset.bytesNum) && ((!__isset.bytesNum) || (global::System.Object.Equals(BytesNum, other.BytesNum))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((FileLink != null) && __isset.fileLink)
        {
          hashcode = (hashcode * 397) + FileLink.GetHashCode();
        }
        if(__isset.expiryTime)
        {
          hashcode = (hashcode * 397) + ExpiryTime.GetHashCode();
        }
        if(__isset.startRowOffset)
        {
          hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        }
        if(__isset.rowCount)
        {
          hashcode = (hashcode * 397) + RowCount.GetHashCode();
        }
        if(__isset.bytesNum)
        {
          hashcode = (hashcode * 397) + BytesNum.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp185 = new StringBuilder("TSparkArrowResultLink(");
      int tmp186 = 0;
      if((FileLink != null) && __isset.fileLink)
      {
        if(0 < tmp186++) { tmp185.Append(", "); }
        tmp185.Append("FileLink: ");
        FileLink.ToString(tmp185);
      }
      if(__isset.expiryTime)
      {
        if(0 < tmp186++) { tmp185.Append(", "); }
        tmp185.Append("ExpiryTime: ");
        ExpiryTime.ToString(tmp185);
      }
      if(__isset.startRowOffset)
      {
        if(0 < tmp186++) { tmp185.Append(", "); }
        tmp185.Append("StartRowOffset: ");
        StartRowOffset.ToString(tmp185);
      }
      if(__isset.rowCount)
      {
        if(0 < tmp186++) { tmp185.Append(", "); }
        tmp185.Append("RowCount: ");
        RowCount.ToString(tmp185);
      }
      if(__isset.bytesNum)
      {
        if(0 < tmp186++) { tmp185.Append(", "); }
        tmp185.Append("BytesNum: ");
        BytesNum.ToString(tmp185);
      }
      tmp185.Append(')');
      return tmp185.ToString();
    }
  }

}
