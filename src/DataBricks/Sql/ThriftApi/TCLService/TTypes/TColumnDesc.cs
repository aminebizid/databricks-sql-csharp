/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TColumnDesc : TBase
  {
    private string? _columnName;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TTypeDesc? _typeDesc;
    private int _position;
    private string? _comment;

    public string? ColumnName
    {
      get
      {
        return _columnName;
      }
      set
      {
        __isset.columnName = true;
        this._columnName = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TTypeDesc? TypeDesc
    {
      get
      {
        return _typeDesc;
      }
      set
      {
        __isset.typeDesc = true;
        this._typeDesc = value;
      }
    }

    public int Position
    {
      get
      {
        return _position;
      }
      set
      {
        __isset.position = true;
        this._position = value;
      }
    }

    public string? Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool columnName;
      public bool typeDesc;
      public bool position;
      public bool comment;
    }

    public TColumnDesc()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ColumnName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                TypeDesc = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TTypeDesc();
                await TypeDesc.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Position = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Comment = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp59 = new TStruct("TColumnDesc");
        await oprot.WriteStructBeginAsync(tmp59, cancellationToken);
        var tmp60 = new TField();
        if((ColumnName != null) && __isset.columnName)
        {
          tmp60.Name = "columnName";
          tmp60.Type = TType.String;
          tmp60.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteStringAsync(ColumnName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TypeDesc != null) && __isset.typeDesc)
        {
          tmp60.Name = "typeDesc";
          tmp60.Type = TType.Struct;
          tmp60.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await TypeDesc.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.position)
        {
          tmp60.Name = "position";
          tmp60.Type = TType.I32;
          tmp60.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteI32Async(Position, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Comment != null) && __isset.comment)
        {
          tmp60.Name = "comment";
          tmp60.Type = TType.String;
          tmp60.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp60, cancellationToken);
          await oprot.WriteStringAsync(Comment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TColumnDesc other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.columnName == other.__isset.columnName) && ((!__isset.columnName) || (global::System.Object.Equals(ColumnName, other.ColumnName))))
        && ((__isset.typeDesc == other.__isset.typeDesc) && ((!__isset.typeDesc) || (global::System.Object.Equals(TypeDesc, other.TypeDesc))))
        && ((__isset.position == other.__isset.position) && ((!__isset.position) || (global::System.Object.Equals(Position, other.Position))))
        && ((__isset.comment == other.__isset.comment) && ((!__isset.comment) || (global::System.Object.Equals(Comment, other.Comment))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ColumnName != null) && __isset.columnName)
        {
          hashcode = (hashcode * 397) + ColumnName.GetHashCode();
        }
        if((TypeDesc != null) && __isset.typeDesc)
        {
          hashcode = (hashcode * 397) + TypeDesc.GetHashCode();
        }
        if(__isset.position)
        {
          hashcode = (hashcode * 397) + Position.GetHashCode();
        }
        if((Comment != null) && __isset.comment)
        {
          hashcode = (hashcode * 397) + Comment.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp61 = new StringBuilder("TColumnDesc(");
      int tmp62 = 0;
      if((ColumnName != null) && __isset.columnName)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("ColumnName: ");
        ColumnName.ToString(tmp61);
      }
      if((TypeDesc != null) && __isset.typeDesc)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("TypeDesc: ");
        TypeDesc.ToString(tmp61);
      }
      if(__isset.position)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Position: ");
        Position.ToString(tmp61);
      }
      if((Comment != null) && __isset.comment)
      {
        if(0 < tmp62++) { tmp61.Append(", "); }
        tmp61.Append("Comment: ");
        Comment.ToString(tmp61);
      }
      tmp61.Append(')');
      return tmp61.ToString();
    }
  }

}
