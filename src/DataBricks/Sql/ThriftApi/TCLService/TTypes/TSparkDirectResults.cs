/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TSparkDirectResults : TBase
  {
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp? _operationStatus;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp? _resultSetMetadata;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp? _resultSet;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp? _closeOperation;

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp? OperationStatus
    {
      get
      {
        return _operationStatus;
      }
      set
      {
        __isset.operationStatus = true;
        this._operationStatus = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp? ResultSetMetadata
    {
      get
      {
        return _resultSetMetadata;
      }
      set
      {
        __isset.resultSetMetadata = true;
        this._resultSetMetadata = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp? ResultSet
    {
      get
      {
        return _resultSet;
      }
      set
      {
        __isset.resultSet = true;
        this._resultSet = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp? CloseOperation
    {
      get
      {
        return _closeOperation;
      }
      set
      {
        __isset.closeOperation = true;
        this._closeOperation = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool operationStatus;
      public bool resultSetMetadata;
      public bool resultSet;
      public bool closeOperation;
    }

    public TSparkDirectResults()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                OperationStatus = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TGetOperationStatusResp();
                await OperationStatus.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                ResultSetMetadata = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TGetResultSetMetadataResp();
                await ResultSetMetadata.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                ResultSet = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TFetchResultsResp();
                await ResultSet.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                CloseOperation = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TCloseOperationResp();
                await CloseOperation.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp312 = new TStruct("TSparkDirectResults");
        await oprot.WriteStructBeginAsync(tmp312, cancellationToken);
        var tmp313 = new TField();
        if((OperationStatus != null) && __isset.operationStatus)
        {
          tmp313.Name = "operationStatus";
          tmp313.Type = TType.Struct;
          tmp313.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
          await OperationStatus.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ResultSetMetadata != null) && __isset.resultSetMetadata)
        {
          tmp313.Name = "resultSetMetadata";
          tmp313.Type = TType.Struct;
          tmp313.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
          await ResultSetMetadata.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ResultSet != null) && __isset.resultSet)
        {
          tmp313.Name = "resultSet";
          tmp313.Type = TType.Struct;
          tmp313.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
          await ResultSet.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CloseOperation != null) && __isset.closeOperation)
        {
          tmp313.Name = "closeOperation";
          tmp313.Type = TType.Struct;
          tmp313.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
          await CloseOperation.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TSparkDirectResults other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.operationStatus == other.__isset.operationStatus) && ((!__isset.operationStatus) || (global::System.Object.Equals(OperationStatus, other.OperationStatus))))
        && ((__isset.resultSetMetadata == other.__isset.resultSetMetadata) && ((!__isset.resultSetMetadata) || (global::System.Object.Equals(ResultSetMetadata, other.ResultSetMetadata))))
        && ((__isset.resultSet == other.__isset.resultSet) && ((!__isset.resultSet) || (global::System.Object.Equals(ResultSet, other.ResultSet))))
        && ((__isset.closeOperation == other.__isset.closeOperation) && ((!__isset.closeOperation) || (global::System.Object.Equals(CloseOperation, other.CloseOperation))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((OperationStatus != null) && __isset.operationStatus)
        {
          hashcode = (hashcode * 397) + OperationStatus.GetHashCode();
        }
        if((ResultSetMetadata != null) && __isset.resultSetMetadata)
        {
          hashcode = (hashcode * 397) + ResultSetMetadata.GetHashCode();
        }
        if((ResultSet != null) && __isset.resultSet)
        {
          hashcode = (hashcode * 397) + ResultSet.GetHashCode();
        }
        if((CloseOperation != null) && __isset.closeOperation)
        {
          hashcode = (hashcode * 397) + CloseOperation.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp314 = new StringBuilder("TSparkDirectResults(");
      int tmp315 = 0;
      if((OperationStatus != null) && __isset.operationStatus)
      {
        if(0 < tmp315++) { tmp314.Append(", "); }
        tmp314.Append("OperationStatus: ");
        OperationStatus.ToString(tmp314);
      }
      if((ResultSetMetadata != null) && __isset.resultSetMetadata)
      {
        if(0 < tmp315++) { tmp314.Append(", "); }
        tmp314.Append("ResultSetMetadata: ");
        ResultSetMetadata.ToString(tmp314);
      }
      if((ResultSet != null) && __isset.resultSet)
      {
        if(0 < tmp315++) { tmp314.Append(", "); }
        tmp314.Append("ResultSet: ");
        ResultSet.ToString(tmp314);
      }
      if((CloseOperation != null) && __isset.closeOperation)
      {
        if(0 < tmp315++) { tmp314.Append(", "); }
        tmp314.Append("CloseOperation: ");
        CloseOperation.ToString(tmp314);
      }
      tmp314.Append(')');
      return tmp314.ToString();
    }
  }

}
