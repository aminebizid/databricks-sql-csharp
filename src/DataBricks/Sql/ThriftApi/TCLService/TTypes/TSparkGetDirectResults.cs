/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TSparkGetDirectResults : TBase
  {
    private long _maxRows;
    private long _maxBytes;

    public long MaxRows
    {
      get
      {
        return _maxRows;
      }
      set
      {
        __isset.maxRows = true;
        this._maxRows = value;
      }
    }

    public long MaxBytes
    {
      get
      {
        return _maxBytes;
      }
      set
      {
        __isset.maxBytes = true;
        this._maxBytes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool maxRows;
      public bool maxBytes;
    }

    public TSparkGetDirectResults()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                MaxRows = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                MaxBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp308 = new TStruct("TSparkGetDirectResults");
        await oprot.WriteStructBeginAsync(tmp308, cancellationToken);
        var tmp309 = new TField();
        if(__isset.maxRows)
        {
          tmp309.Name = "maxRows";
          tmp309.Type = TType.I64;
          tmp309.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
          await oprot.WriteI64Async(MaxRows, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxBytes)
        {
          tmp309.Name = "maxBytes";
          tmp309.Type = TType.I64;
          tmp309.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
          await oprot.WriteI64Async(MaxBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TSparkGetDirectResults other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.maxRows == other.__isset.maxRows) && ((!__isset.maxRows) || (global::System.Object.Equals(MaxRows, other.MaxRows))))
        && ((__isset.maxBytes == other.__isset.maxBytes) && ((!__isset.maxBytes) || (global::System.Object.Equals(MaxBytes, other.MaxBytes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.maxRows)
        {
          hashcode = (hashcode * 397) + MaxRows.GetHashCode();
        }
        if(__isset.maxBytes)
        {
          hashcode = (hashcode * 397) + MaxBytes.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp310 = new StringBuilder("TSparkGetDirectResults(");
      int tmp311 = 0;
      if(__isset.maxRows)
      {
        if(0 < tmp311++) { tmp310.Append(", "); }
        tmp310.Append("MaxRows: ");
        MaxRows.ToString(tmp310);
      }
      if(__isset.maxBytes)
      {
        if(0 < tmp311++) { tmp310.Append(", "); }
        tmp310.Append("MaxBytes: ");
        MaxBytes.ToString(tmp310);
      }
      tmp310.Append(')');
      return tmp310.ToString();
    }
  }

}
