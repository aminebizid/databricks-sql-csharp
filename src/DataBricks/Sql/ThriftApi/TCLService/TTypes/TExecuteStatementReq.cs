/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TExecuteStatementReq : TBase
  {
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSessionHandle? _sessionHandle;
    private string? _statement;
    private Dictionary<string, string>? _confOverlay;
    private bool _runAsync;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSparkGetDirectResults? _getDirectResults;
    private long _queryTimeout;
    private bool _canReadArrowResult;
    private bool _canDownloadResult;
    private bool _canDecompressLZ4Result;
    private long _maxBytesPerFile;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSparkArrowTypes? _useArrowNativeTypes;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? _operationId;
    private global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionConf? _sessionConf;
    private bool _rejectHighCostQueries;
    private double _estimatedCost;

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSessionHandle? SessionHandle
    {
      get
      {
        return _sessionHandle;
      }
      set
      {
        __isset.sessionHandle = true;
        this._sessionHandle = value;
      }
    }

    public string? Statement
    {
      get
      {
        return _statement;
      }
      set
      {
        __isset.statement = true;
        this._statement = value;
      }
    }

    public Dictionary<string, string>? ConfOverlay
    {
      get
      {
        return _confOverlay;
      }
      set
      {
        __isset.confOverlay = true;
        this._confOverlay = value;
      }
    }

    public bool RunAsync
    {
      get
      {
        return _runAsync;
      }
      set
      {
        __isset.runAsync = true;
        this._runAsync = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSparkGetDirectResults? GetDirectResults
    {
      get
      {
        return _getDirectResults;
      }
      set
      {
        __isset.getDirectResults = true;
        this._getDirectResults = value;
      }
    }

    public long QueryTimeout
    {
      get
      {
        return _queryTimeout;
      }
      set
      {
        __isset.queryTimeout = true;
        this._queryTimeout = value;
      }
    }

    public bool CanReadArrowResult
    {
      get
      {
        return _canReadArrowResult;
      }
      set
      {
        __isset.canReadArrowResult = true;
        this._canReadArrowResult = value;
      }
    }

    public bool CanDownloadResult
    {
      get
      {
        return _canDownloadResult;
      }
      set
      {
        __isset.canDownloadResult = true;
        this._canDownloadResult = value;
      }
    }

    public bool CanDecompressLZ4Result
    {
      get
      {
        return _canDecompressLZ4Result;
      }
      set
      {
        __isset.canDecompressLZ4Result = true;
        this._canDecompressLZ4Result = value;
      }
    }

    public long MaxBytesPerFile
    {
      get
      {
        return _maxBytesPerFile;
      }
      set
      {
        __isset.maxBytesPerFile = true;
        this._maxBytesPerFile = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSparkArrowTypes? UseArrowNativeTypes
    {
      get
      {
        return _useArrowNativeTypes;
      }
      set
      {
        __isset.useArrowNativeTypes = true;
        this._useArrowNativeTypes = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier? OperationId
    {
      get
      {
        return _operationId;
      }
      set
      {
        __isset.operationId = true;
        this._operationId = value;
      }
    }

    public global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionConf? SessionConf
    {
      get
      {
        return _sessionConf;
      }
      set
      {
        __isset.sessionConf = true;
        this._sessionConf = value;
      }
    }

    public bool RejectHighCostQueries
    {
      get
      {
        return _rejectHighCostQueries;
      }
      set
      {
        __isset.rejectHighCostQueries = true;
        this._rejectHighCostQueries = value;
      }
    }

    public double EstimatedCost
    {
      get
      {
        return _estimatedCost;
      }
      set
      {
        __isset.estimatedCost = true;
        this._estimatedCost = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sessionHandle;
      public bool statement;
      public bool confOverlay;
      public bool runAsync;
      public bool getDirectResults;
      public bool queryTimeout;
      public bool canReadArrowResult;
      public bool canDownloadResult;
      public bool canDecompressLZ4Result;
      public bool maxBytesPerFile;
      public bool useArrowNativeTypes;
      public bool operationId;
      public bool sessionConf;
      public bool rejectHighCostQueries;
      public bool estimatedCost;
    }

    public TExecuteStatementReq()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Statement = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  var _map320 = await iprot.ReadMapBeginAsync(cancellationToken);
                  ConfOverlay = new Dictionary<string, string>(_map320.Count);
                  for(int _i321 = 0; _i321 < _map320.Count; ++_i321)
                  {
                    string _key322;
                    string _val323;
                    _key322 = await iprot.ReadStringAsync(cancellationToken);
                    _val323 = await iprot.ReadStringAsync(cancellationToken);
                    ConfOverlay[_key322] = _val323;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                RunAsync = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.Struct)
              {
                GetDirectResults = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSparkGetDirectResults();
                await GetDirectResults.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                QueryTimeout = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.Bool)
              {
                CanReadArrowResult = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.Bool)
              {
                CanDownloadResult = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1284:
              if (field.Type == TType.Bool)
              {
                CanDecompressLZ4Result = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1285:
              if (field.Type == TType.I64)
              {
                MaxBytesPerFile = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1286:
              if (field.Type == TType.Struct)
              {
                UseArrowNativeTypes = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TSparkArrowTypes();
                await UseArrowNativeTypes.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.Struct)
              {
                OperationId = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.THandleIdentifier();
                await OperationId.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3330:
              if (field.Type == TType.Struct)
              {
                SessionConf = new global::DataBricks.Sql.ThriftApi.TCLService.TTypes.TDBSqlSessionConf();
                await SessionConf.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3331:
              if (field.Type == TType.Bool)
              {
                RejectHighCostQueries = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3332:
              if (field.Type == TType.Double)
              {
                EstimatedCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp324 = new TStruct("TExecuteStatementReq");
        await oprot.WriteStructBeginAsync(tmp324, cancellationToken);
        var tmp325 = new TField();
        if((SessionHandle != null) && __isset.sessionHandle)
        {
          tmp325.Name = "sessionHandle";
          tmp325.Type = TType.Struct;
          tmp325.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Statement != null) && __isset.statement)
        {
          tmp325.Name = "statement";
          tmp325.Type = TType.String;
          tmp325.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteStringAsync(Statement, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ConfOverlay != null) && __isset.confOverlay)
        {
          tmp325.Name = "confOverlay";
          tmp325.Type = TType.Map;
          tmp325.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConfOverlay.Count), cancellationToken);
          foreach (string _iter326 in ConfOverlay.Keys)
          {
            await oprot.WriteStringAsync(_iter326, cancellationToken);
            await oprot.WriteStringAsync(ConfOverlay[_iter326], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.runAsync)
        {
          tmp325.Name = "runAsync";
          tmp325.Type = TType.Bool;
          tmp325.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteBoolAsync(RunAsync, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.queryTimeout)
        {
          tmp325.Name = "queryTimeout";
          tmp325.Type = TType.I64;
          tmp325.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteI64Async(QueryTimeout, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          tmp325.Name = "getDirectResults";
          tmp325.Type = TType.Struct;
          tmp325.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await GetDirectResults.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canReadArrowResult)
        {
          tmp325.Name = "canReadArrowResult";
          tmp325.Type = TType.Bool;
          tmp325.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteBoolAsync(CanReadArrowResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canDownloadResult)
        {
          tmp325.Name = "canDownloadResult";
          tmp325.Type = TType.Bool;
          tmp325.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteBoolAsync(CanDownloadResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canDecompressLZ4Result)
        {
          tmp325.Name = "canDecompressLZ4Result";
          tmp325.Type = TType.Bool;
          tmp325.ID = 1284;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteBoolAsync(CanDecompressLZ4Result, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxBytesPerFile)
        {
          tmp325.Name = "maxBytesPerFile";
          tmp325.Type = TType.I64;
          tmp325.ID = 1285;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteI64Async(MaxBytesPerFile, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UseArrowNativeTypes != null) && __isset.useArrowNativeTypes)
        {
          tmp325.Name = "useArrowNativeTypes";
          tmp325.Type = TType.Struct;
          tmp325.ID = 1286;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await UseArrowNativeTypes.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((OperationId != null) && __isset.operationId)
        {
          tmp325.Name = "operationId";
          tmp325.Type = TType.Struct;
          tmp325.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await OperationId.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SessionConf != null) && __isset.sessionConf)
        {
          tmp325.Name = "sessionConf";
          tmp325.Type = TType.Struct;
          tmp325.ID = 3330;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await SessionConf.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.rejectHighCostQueries)
        {
          tmp325.Name = "rejectHighCostQueries";
          tmp325.Type = TType.Bool;
          tmp325.ID = 3331;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteBoolAsync(RejectHighCostQueries, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.estimatedCost)
        {
          tmp325.Name = "estimatedCost";
          tmp325.Type = TType.Double;
          tmp325.ID = 3332;
          await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
          await oprot.WriteDoubleAsync(EstimatedCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TExecuteStatementReq other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.sessionHandle == other.__isset.sessionHandle) && ((!__isset.sessionHandle) || (global::System.Object.Equals(SessionHandle, other.SessionHandle))))
        && ((__isset.statement == other.__isset.statement) && ((!__isset.statement) || (global::System.Object.Equals(Statement, other.Statement))))
        && ((__isset.confOverlay == other.__isset.confOverlay) && ((!__isset.confOverlay) || (TCollections.Equals(ConfOverlay, other.ConfOverlay))))
        && ((__isset.runAsync == other.__isset.runAsync) && ((!__isset.runAsync) || (global::System.Object.Equals(RunAsync, other.RunAsync))))
        && ((__isset.getDirectResults == other.__isset.getDirectResults) && ((!__isset.getDirectResults) || (global::System.Object.Equals(GetDirectResults, other.GetDirectResults))))
        && ((__isset.queryTimeout == other.__isset.queryTimeout) && ((!__isset.queryTimeout) || (global::System.Object.Equals(QueryTimeout, other.QueryTimeout))))
        && ((__isset.canReadArrowResult == other.__isset.canReadArrowResult) && ((!__isset.canReadArrowResult) || (global::System.Object.Equals(CanReadArrowResult, other.CanReadArrowResult))))
        && ((__isset.canDownloadResult == other.__isset.canDownloadResult) && ((!__isset.canDownloadResult) || (global::System.Object.Equals(CanDownloadResult, other.CanDownloadResult))))
        && ((__isset.canDecompressLZ4Result == other.__isset.canDecompressLZ4Result) && ((!__isset.canDecompressLZ4Result) || (global::System.Object.Equals(CanDecompressLZ4Result, other.CanDecompressLZ4Result))))
        && ((__isset.maxBytesPerFile == other.__isset.maxBytesPerFile) && ((!__isset.maxBytesPerFile) || (global::System.Object.Equals(MaxBytesPerFile, other.MaxBytesPerFile))))
        && ((__isset.useArrowNativeTypes == other.__isset.useArrowNativeTypes) && ((!__isset.useArrowNativeTypes) || (global::System.Object.Equals(UseArrowNativeTypes, other.UseArrowNativeTypes))))
        && ((__isset.operationId == other.__isset.operationId) && ((!__isset.operationId) || (global::System.Object.Equals(OperationId, other.OperationId))))
        && ((__isset.sessionConf == other.__isset.sessionConf) && ((!__isset.sessionConf) || (global::System.Object.Equals(SessionConf, other.SessionConf))))
        && ((__isset.rejectHighCostQueries == other.__isset.rejectHighCostQueries) && ((!__isset.rejectHighCostQueries) || (global::System.Object.Equals(RejectHighCostQueries, other.RejectHighCostQueries))))
        && ((__isset.estimatedCost == other.__isset.estimatedCost) && ((!__isset.estimatedCost) || (global::System.Object.Equals(EstimatedCost, other.EstimatedCost))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((SessionHandle != null) && __isset.sessionHandle)
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if((Statement != null) && __isset.statement)
        {
          hashcode = (hashcode * 397) + Statement.GetHashCode();
        }
        if((ConfOverlay != null) && __isset.confOverlay)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ConfOverlay);
        }
        if(__isset.runAsync)
        {
          hashcode = (hashcode * 397) + RunAsync.GetHashCode();
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          hashcode = (hashcode * 397) + GetDirectResults.GetHashCode();
        }
        if(__isset.queryTimeout)
        {
          hashcode = (hashcode * 397) + QueryTimeout.GetHashCode();
        }
        if(__isset.canReadArrowResult)
        {
          hashcode = (hashcode * 397) + CanReadArrowResult.GetHashCode();
        }
        if(__isset.canDownloadResult)
        {
          hashcode = (hashcode * 397) + CanDownloadResult.GetHashCode();
        }
        if(__isset.canDecompressLZ4Result)
        {
          hashcode = (hashcode * 397) + CanDecompressLZ4Result.GetHashCode();
        }
        if(__isset.maxBytesPerFile)
        {
          hashcode = (hashcode * 397) + MaxBytesPerFile.GetHashCode();
        }
        if((UseArrowNativeTypes != null) && __isset.useArrowNativeTypes)
        {
          hashcode = (hashcode * 397) + UseArrowNativeTypes.GetHashCode();
        }
        if((OperationId != null) && __isset.operationId)
        {
          hashcode = (hashcode * 397) + OperationId.GetHashCode();
        }
        if((SessionConf != null) && __isset.sessionConf)
        {
          hashcode = (hashcode * 397) + SessionConf.GetHashCode();
        }
        if(__isset.rejectHighCostQueries)
        {
          hashcode = (hashcode * 397) + RejectHighCostQueries.GetHashCode();
        }
        if(__isset.estimatedCost)
        {
          hashcode = (hashcode * 397) + EstimatedCost.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp327 = new StringBuilder("TExecuteStatementReq(");
      int tmp328 = 0;
      if((SessionHandle != null) && __isset.sessionHandle)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("SessionHandle: ");
        SessionHandle.ToString(tmp327);
      }
      if((Statement != null) && __isset.statement)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("Statement: ");
        Statement.ToString(tmp327);
      }
      if((ConfOverlay != null) && __isset.confOverlay)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("ConfOverlay: ");
        ConfOverlay.ToString(tmp327);
      }
      if(__isset.runAsync)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("RunAsync: ");
        RunAsync.ToString(tmp327);
      }
      if((GetDirectResults != null) && __isset.getDirectResults)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("GetDirectResults: ");
        GetDirectResults.ToString(tmp327);
      }
      if(__isset.queryTimeout)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("QueryTimeout: ");
        QueryTimeout.ToString(tmp327);
      }
      if(__isset.canReadArrowResult)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("CanReadArrowResult: ");
        CanReadArrowResult.ToString(tmp327);
      }
      if(__isset.canDownloadResult)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("CanDownloadResult: ");
        CanDownloadResult.ToString(tmp327);
      }
      if(__isset.canDecompressLZ4Result)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("CanDecompressLZ4Result: ");
        CanDecompressLZ4Result.ToString(tmp327);
      }
      if(__isset.maxBytesPerFile)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("MaxBytesPerFile: ");
        MaxBytesPerFile.ToString(tmp327);
      }
      if((UseArrowNativeTypes != null) && __isset.useArrowNativeTypes)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("UseArrowNativeTypes: ");
        UseArrowNativeTypes.ToString(tmp327);
      }
      if((OperationId != null) && __isset.operationId)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("OperationId: ");
        OperationId.ToString(tmp327);
      }
      if((SessionConf != null) && __isset.sessionConf)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("SessionConf: ");
        SessionConf.ToString(tmp327);
      }
      if(__isset.rejectHighCostQueries)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("RejectHighCostQueries: ");
        RejectHighCostQueries.ToString(tmp327);
      }
      if(__isset.estimatedCost)
      {
        if(0 < tmp328++) { tmp327.Append(", "); }
        tmp327.Append("EstimatedCost: ");
        EstimatedCost.ToString(tmp327);
      }
      tmp327.Append(')');
      return tmp327.ToString();
    }
  }

}
