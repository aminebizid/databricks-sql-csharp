/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TStatus : TBase
  {
    private int _statusCode;
    private List<string>? _infoMessages;
    private string? _sqlState;
    private int _errorCode;
    private string? _errorMessage;

    public int StatusCode
    {
      get
      {
        return _statusCode;
      }
      set
      {
        __isset.statusCode = true;
        this._statusCode = value;
      }
    }

    public List<string>? InfoMessages
    {
      get
      {
        return _infoMessages;
      }
      set
      {
        __isset.infoMessages = true;
        this._infoMessages = value;
      }
    }

    public string? SqlState
    {
      get
      {
        return _sqlState;
      }
      set
      {
        __isset.sqlState = true;
        this._sqlState = value;
      }
    }

    public int ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public string? ErrorMessage
    {
      get
      {
        return _errorMessage;
      }
      set
      {
        __isset.errorMessage = true;
        this._errorMessage = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool statusCode;
      public bool infoMessages;
      public bool sqlState;
      public bool errorCode;
      public bool errorMessage;
    }

    public TStatus()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                StatusCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list233 = await iprot.ReadListBeginAsync(cancellationToken);
                  InfoMessages = new List<string>(_list233.Count);
                  for(int _i234 = 0; _i234 < _list233.Count; ++_i234)
                  {
                    string _elem235;
                    _elem235 = await iprot.ReadStringAsync(cancellationToken);
                    InfoMessages.Add(_elem235);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SqlState = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ErrorCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp236 = new TStruct("TStatus");
        await oprot.WriteStructBeginAsync(tmp236, cancellationToken);
        var tmp237 = new TField();
        if(__isset.statusCode)
        {
          tmp237.Name = "statusCode";
          tmp237.Type = TType.I32;
          tmp237.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
          await oprot.WriteI32Async(StatusCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InfoMessages != null) && __isset.infoMessages)
        {
          tmp237.Name = "infoMessages";
          tmp237.Type = TType.List;
          tmp237.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, InfoMessages.Count), cancellationToken);
          foreach (string _iter238 in InfoMessages)
          {
            await oprot.WriteStringAsync(_iter238, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SqlState != null) && __isset.sqlState)
        {
          tmp237.Name = "sqlState";
          tmp237.Type = TType.String;
          tmp237.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
          await oprot.WriteStringAsync(SqlState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.errorCode)
        {
          tmp237.Name = "errorCode";
          tmp237.Type = TType.I32;
          tmp237.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
          await oprot.WriteI32Async(ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          tmp237.Name = "errorMessage";
          tmp237.Type = TType.String;
          tmp237.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
          await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TStatus other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.statusCode == other.__isset.statusCode) && ((!__isset.statusCode) || (global::System.Object.Equals(StatusCode, other.StatusCode))))
        && ((__isset.infoMessages == other.__isset.infoMessages) && ((!__isset.infoMessages) || (TCollections.Equals(InfoMessages, other.InfoMessages))))
        && ((__isset.sqlState == other.__isset.sqlState) && ((!__isset.sqlState) || (global::System.Object.Equals(SqlState, other.SqlState))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (global::System.Object.Equals(ErrorCode, other.ErrorCode))))
        && ((__isset.errorMessage == other.__isset.errorMessage) && ((!__isset.errorMessage) || (global::System.Object.Equals(ErrorMessage, other.ErrorMessage))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.statusCode)
        {
          hashcode = (hashcode * 397) + StatusCode.GetHashCode();
        }
        if((InfoMessages != null) && __isset.infoMessages)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(InfoMessages);
        }
        if((SqlState != null) && __isset.sqlState)
        {
          hashcode = (hashcode * 397) + SqlState.GetHashCode();
        }
        if(__isset.errorCode)
        {
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          hashcode = (hashcode * 397) + ErrorMessage.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp239 = new StringBuilder("TStatus(");
      int tmp240 = 0;
      if(__isset.statusCode)
      {
        if(0 < tmp240++) { tmp239.Append(", "); }
        tmp239.Append("StatusCode: ");
        StatusCode.ToString(tmp239);
      }
      if((InfoMessages != null) && __isset.infoMessages)
      {
        if(0 < tmp240++) { tmp239.Append(", "); }
        tmp239.Append("InfoMessages: ");
        InfoMessages.ToString(tmp239);
      }
      if((SqlState != null) && __isset.sqlState)
      {
        if(0 < tmp240++) { tmp239.Append(", "); }
        tmp239.Append("SqlState: ");
        SqlState.ToString(tmp239);
      }
      if(__isset.errorCode)
      {
        if(0 < tmp240++) { tmp239.Append(", "); }
        tmp239.Append("ErrorCode: ");
        ErrorCode.ToString(tmp239);
      }
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        if(0 < tmp240++) { tmp239.Append(", "); }
        tmp239.Append("ErrorMessage: ");
        ErrorMessage.ToString(tmp239);
      }
      tmp239.Append(')');
      return tmp239.ToString();
    }
  }

}
