/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TDBSqlTempView : TBase
  {
    private string? _name;
    private string? _sqlStatement;
    private Dictionary<string, string>? _properties;
    private string? _viewSchema;

    public string? Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string? SqlStatement
    {
      get
      {
        return _sqlStatement;
      }
      set
      {
        __isset.sqlStatement = true;
        this._sqlStatement = value;
      }
    }

    public Dictionary<string, string>? Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public string? ViewSchema
    {
      get
      {
        return _viewSchema;
      }
      set
      {
        __isset.viewSchema = true;
        this._viewSchema = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool name;
      public bool sqlStatement;
      public bool properties;
      public bool viewSchema;
    }

    public TDBSqlTempView()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                SqlStatement = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  var _map207 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Properties = new Dictionary<string, string>(_map207.Count);
                  for(int _i208 = 0; _i208 < _map207.Count; ++_i208)
                  {
                    string _key209;
                    string _val210;
                    _key209 = await iprot.ReadStringAsync(cancellationToken);
                    _val210 = await iprot.ReadStringAsync(cancellationToken);
                    Properties[_key209] = _val210;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ViewSchema = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp211 = new TStruct("TDBSqlTempView");
        await oprot.WriteStructBeginAsync(tmp211, cancellationToken);
        var tmp212 = new TField();
        if((Name != null) && __isset.name)
        {
          tmp212.Name = "name";
          tmp212.Type = TType.String;
          tmp212.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp212, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SqlStatement != null) && __isset.sqlStatement)
        {
          tmp212.Name = "sqlStatement";
          tmp212.Type = TType.String;
          tmp212.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp212, cancellationToken);
          await oprot.WriteStringAsync(SqlStatement, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Properties != null) && __isset.properties)
        {
          tmp212.Name = "properties";
          tmp212.Type = TType.Map;
          tmp212.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp212, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Properties.Count), cancellationToken);
          foreach (string _iter213 in Properties.Keys)
          {
            await oprot.WriteStringAsync(_iter213, cancellationToken);
            await oprot.WriteStringAsync(Properties[_iter213], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ViewSchema != null) && __isset.viewSchema)
        {
          tmp212.Name = "viewSchema";
          tmp212.Type = TType.String;
          tmp212.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp212, cancellationToken);
          await oprot.WriteStringAsync(ViewSchema, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TDBSqlTempView other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.sqlStatement == other.__isset.sqlStatement) && ((!__isset.sqlStatement) || (global::System.Object.Equals(SqlStatement, other.SqlStatement))))
        && ((__isset.properties == other.__isset.properties) && ((!__isset.properties) || (TCollections.Equals(Properties, other.Properties))))
        && ((__isset.viewSchema == other.__isset.viewSchema) && ((!__isset.viewSchema) || (global::System.Object.Equals(ViewSchema, other.ViewSchema))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((SqlStatement != null) && __isset.sqlStatement)
        {
          hashcode = (hashcode * 397) + SqlStatement.GetHashCode();
        }
        if((Properties != null) && __isset.properties)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Properties);
        }
        if((ViewSchema != null) && __isset.viewSchema)
        {
          hashcode = (hashcode * 397) + ViewSchema.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp214 = new StringBuilder("TDBSqlTempView(");
      int tmp215 = 0;
      if((Name != null) && __isset.name)
      {
        if(0 < tmp215++) { tmp214.Append(", "); }
        tmp214.Append("Name: ");
        Name.ToString(tmp214);
      }
      if((SqlStatement != null) && __isset.sqlStatement)
      {
        if(0 < tmp215++) { tmp214.Append(", "); }
        tmp214.Append("SqlStatement: ");
        SqlStatement.ToString(tmp214);
      }
      if((Properties != null) && __isset.properties)
      {
        if(0 < tmp215++) { tmp214.Append(", "); }
        tmp214.Append("Properties: ");
        Properties.ToString(tmp214);
      }
      if((ViewSchema != null) && __isset.viewSchema)
      {
        if(0 < tmp215++) { tmp214.Append(", "); }
        tmp214.Append("ViewSchema: ");
        ViewSchema.ToString(tmp214);
      }
      tmp214.Append(')');
      return tmp214.ToString();
    }
  }

}
