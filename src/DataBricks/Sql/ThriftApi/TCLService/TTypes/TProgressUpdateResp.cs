/**
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace DataBricks.Sql.ThriftApi.TCLService.TTypes
{

  public partial class TProgressUpdateResp : TBase
  {
    private List<string>? _headerNames;
    private List<string>? _rows;
    private double _progressedPercentage;
    private int _status;
    private string? _footerSummary;
    private long _startTime;

    public List<string>? HeaderNames
    {
      get
      {
        return _headerNames;
      }
      set
      {
        __isset.headerNames = true;
        this._headerNames = value;
      }
    }

    public List<string>? Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    public double ProgressedPercentage
    {
      get
      {
        return _progressedPercentage;
      }
      set
      {
        __isset.progressedPercentage = true;
        this._progressedPercentage = value;
      }
    }

    public int Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public string? FooterSummary
    {
      get
      {
        return _footerSummary;
      }
      set
      {
        __isset.footerSummary = true;
        this._footerSummary = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool headerNames;
      public bool rows;
      public bool progressedPercentage;
      public bool status;
      public bool footerSummary;
      public bool startTime;
    }

    public TProgressUpdateResp()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list473 = await iprot.ReadListBeginAsync(cancellationToken);
                  HeaderNames = new List<string>(_list473.Count);
                  for(int _i474 = 0; _i474 < _list473.Count; ++_i474)
                  {
                    string _elem475;
                    _elem475 = await iprot.ReadStringAsync(cancellationToken);
                    HeaderNames.Add(_elem475);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list476 = await iprot.ReadListBeginAsync(cancellationToken);
                  Rows = new List<string>(_list476.Count);
                  for(int _i477 = 0; _i477 < _list476.Count; ++_i477)
                  {
                    string _elem478;
                    _elem478 = await iprot.ReadStringAsync(cancellationToken);
                    Rows.Add(_elem478);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                ProgressedPercentage = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Status = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                FooterSummary = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                StartTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp479 = new TStruct("TProgressUpdateResp");
        await oprot.WriteStructBeginAsync(tmp479, cancellationToken);
        var tmp480 = new TField();
        if((HeaderNames != null) && __isset.headerNames)
        {
          tmp480.Name = "headerNames";
          tmp480.Type = TType.List;
          tmp480.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, HeaderNames.Count), cancellationToken);
          foreach (string _iter481 in HeaderNames)
          {
            await oprot.WriteStringAsync(_iter481, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Rows != null) && __isset.rows)
        {
          tmp480.Name = "rows";
          tmp480.Type = TType.List;
          tmp480.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, Rows.Count), cancellationToken);
          foreach (string _iter482 in Rows)
          {
            await oprot.WriteStringAsync(_iter482, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.progressedPercentage)
        {
          tmp480.Name = "progressedPercentage";
          tmp480.Type = TType.Double;
          tmp480.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
          await oprot.WriteDoubleAsync(ProgressedPercentage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.status)
        {
          tmp480.Name = "status";
          tmp480.Type = TType.I32;
          tmp480.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
          await oprot.WriteI32Async(Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((FooterSummary != null) && __isset.footerSummary)
        {
          tmp480.Name = "footerSummary";
          tmp480.Type = TType.String;
          tmp480.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
          await oprot.WriteStringAsync(FooterSummary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.startTime)
        {
          tmp480.Name = "startTime";
          tmp480.Type = TType.I64;
          tmp480.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
          await oprot.WriteI64Async(StartTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not TProgressUpdateResp other) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.headerNames == other.__isset.headerNames) && ((!__isset.headerNames) || (TCollections.Equals(HeaderNames, other.HeaderNames))))
        && ((__isset.rows == other.__isset.rows) && ((!__isset.rows) || (TCollections.Equals(Rows, other.Rows))))
        && ((__isset.progressedPercentage == other.__isset.progressedPercentage) && ((!__isset.progressedPercentage) || (global::System.Object.Equals(ProgressedPercentage, other.ProgressedPercentage))))
        && ((__isset.status == other.__isset.status) && ((!__isset.status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.footerSummary == other.__isset.footerSummary) && ((!__isset.footerSummary) || (global::System.Object.Equals(FooterSummary, other.FooterSummary))))
        && ((__isset.startTime == other.__isset.startTime) && ((!__isset.startTime) || (global::System.Object.Equals(StartTime, other.StartTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((HeaderNames != null) && __isset.headerNames)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(HeaderNames);
        }
        if((Rows != null) && __isset.rows)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
        }
        if(__isset.progressedPercentage)
        {
          hashcode = (hashcode * 397) + ProgressedPercentage.GetHashCode();
        }
        if(__isset.status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if((FooterSummary != null) && __isset.footerSummary)
        {
          hashcode = (hashcode * 397) + FooterSummary.GetHashCode();
        }
        if(__isset.startTime)
        {
          hashcode = (hashcode * 397) + StartTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp483 = new StringBuilder("TProgressUpdateResp(");
      int tmp484 = 0;
      if((HeaderNames != null) && __isset.headerNames)
      {
        if(0 < tmp484++) { tmp483.Append(", "); }
        tmp483.Append("HeaderNames: ");
        HeaderNames.ToString(tmp483);
      }
      if((Rows != null) && __isset.rows)
      {
        if(0 < tmp484++) { tmp483.Append(", "); }
        tmp483.Append("Rows: ");
        Rows.ToString(tmp483);
      }
      if(__isset.progressedPercentage)
      {
        if(0 < tmp484++) { tmp483.Append(", "); }
        tmp483.Append("ProgressedPercentage: ");
        ProgressedPercentage.ToString(tmp483);
      }
      if(__isset.status)
      {
        if(0 < tmp484++) { tmp483.Append(", "); }
        tmp483.Append("Status: ");
        Status.ToString(tmp483);
      }
      if((FooterSummary != null) && __isset.footerSummary)
      {
        if(0 < tmp484++) { tmp483.Append(", "); }
        tmp483.Append("FooterSummary: ");
        FooterSummary.ToString(tmp483);
      }
      if(__isset.startTime)
      {
        if(0 < tmp484++) { tmp483.Append(", "); }
        tmp483.Append("StartTime: ");
        StartTime.ToString(tmp483);
      }
      tmp483.Append(')');
      return tmp483.ToString();
    }
  }

}
